<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Geekdom]]></title>
  <link href="http://www.neilsmithline.com/atom.xml" rel="self"/>
  <link href="http://www.neilsmithline.com/"/>
  <updated>2012-08-06T20:34:49-04:00</updated>
  <id>http://www.neilsmithline.com/</id>
  <author>
    <name><![CDATA[Neil Smithline]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Time Tracking, Part 2: Org Mode File Format]]></title>
    <link href="http://www.neilsmithline.com/blog/2012/08/05/time-tracking-part-2/"/>
    <updated>2012-08-05T18:38:00-04:00</updated>
    <id>http://www.neilsmithline.com/blog/2012/08/05/time-tracking-part-2</id>
    <content type="html"><![CDATA[<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">A Brief Introduction To Org Mode File Syntax</h2>
<div class="outline-text-2" id="text-1">

<p>I&#8217;ve decided that my time tracking solution requires some basic understanding of the file format of <a href="http://orgmode.org">Org Mode</a> as Org Mode syntax pervades the system. I&#8217;ve done my best to cover the smallest amount of Org Mode syntax that is needed to understand the examples I&#8217;ll of my time tracking system.
</p>
<p>
It is frequently said that when you buy a house the three most important things to look for are <a href="http://homebuying.about.com/od/marketfactstrends/qt/013008_location.htm">location, location, and location</a>. When it comes to Org Mode, the three most important things to remember are Org Mode file format is plain text, Org Mode file format is plain text, and Org Mode file format is plain text.
</p>
<p>
By <a href="http://en.wikipedia.org/wiki/Plain_text">plain text</a> I mean:
</p><ul>
<li>You don&#8217;t need a <a href="http://en.wikipedia.org/wiki/Graphical_user_interface">GUI</a> or any other program to read an Org Mode file.
</li>
<li>Any <a href="http://en.wikipedia.org/wiki/Text_editor">text editor</a> can be used to create Org Mode files.
</li>
<li>Org Mode files are highly compatible with standard text file utilities such as <a href="http://linux.die.net/man/1/grep">grep(1)</a>.
</li>
</ul>


<p>
While Org Mode&#8217;s use of plain text has many advantages, the files tend to look a bit intimidating to a newcomer.
</p>
<p>
While this posting only discusses Org Mode&#8217;s file format, I use Org Mode for its incredibly rich organizational functionality.
</p></div>

</div>

<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">Hierarchical Outlines</h2>
<div class="outline-text-2" id="text-2">

<p>Org Mode encourages you to store your data in an outline. A level one headline is simply a line of text that begins with a single asterisk (<code>*</code>). A level two headline begins with two asterisks (<code>**</code>), etc&hellip;
</p>


<pre class="example">* Work
** Work hard.
Finish my project ahead of schedule.
** Ask boss for raise.
Remember to compliment him lots when asking.

* Personal
** Clean up after my kids.
Grumble while cleaning up.
** Tell my kids that they should clean up after themselves.
Laugh quietly to myself as I know it won't help.
</pre>



<!-- more -->
</div>

</div>

<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">Adding Tags</h2>
<div class="outline-text-2" id="text-3">

<p>Org Mode allows you to further organize your tasks by adding <a href="http://en.wikipedia.org/wiki/Tag_(metadata)">tags</a> to your todo list. Being that Org Mode is plain text, tags are words wrapped in colons (<code>:</code>).
</p>


<pre class="example">* Work                                                              :work:
** Work hard.
Finish my project ahead of schedule.
** Ask boss for raise.
Remember to compliment him lots when asking.

* Personal                                                          :personal:
** Clean up after my kids.
Grumble while cleaning up.
** Tell my kids that they should clean up after themselves.
Laugh quietly to myself when they say they will but I know they won't.
</pre>


<p>
Tags in Org Mode are inherited with the hierarchical layout of the outline. In the above example, only the two level 1 headlines have tags on their line but their children inherit these tags. For example, the task
</p><pre class="example">
** Clean up after my kids.
</pre>

<p>inherits the <code>:personal:</code> tag.
</p></div>

</div>

<div id="outline-container-4" class="outline-2">
<h2 id="sec-4">Using Tags To Describe Multiple Facets Of A Task</h2>
<div class="outline-text-2" id="text-4">

<p>The above use of tags was rather dull. The tags repeated data that was already in the outline hierarchy. The real power of tags becomes apparent when you use them to classify different facets of a task. For example, a <a href="http://en.wikipedia.org/wiki/Getting_Things_Done">GTD</a> style of tagging can include context tags such as <code>:@home:</code>, as well as priority tags such as <code>:next_action:</code>. Adding these tasks, our example becomes:
</p>


<pre class="example">* Work                                                              :work:
** Work hard.                                                      :@work:@home:%next_action:
Finish my project ahead of schedule.
** Ask boss for raise.                                             :@boss:%someday:
Remember to compliment him lots when asking.

* Personal                                                          :personal:
** Clean up after my kids.                                         :@home:next_action:
Grumble while cleaning up.
** Tell my kids that they should clean up after themselves.        :@home:%why_bother:
Laugh quietly to myself as I know it won't help.
</pre>


<p>
Org Mode provides no categories of tags. For example, priority tags aren&#8217;t different than location or topic tags. Keeping with Org Mode&#8217;s plain text file format,I decided to distinguish my priority tags with a percent sign (<code>%</code>). This makes GTD&#8217;s common <code>:next_action:</code> tag <code>:%next_action:</code>.
</p></div>

</div>

<div id="outline-container-5" class="outline-2">
<h2 id="sec-5">More Info</h2>
<div class="outline-text-2" id="text-5">

<p>If you are interested, you can read more about Org Mode on its <a href="http://orgmode.org">home page</a>, from any one of the vast collection of <a href="http://orgmode.org/worg/org-tutorials/index.html">tutorials</a> on the Org website, or one of the links from <a href="https://www.google.com/webhp?sourceid=chrome-instant&amp;ie=UTF-8&amp;ion=1#hl=en&amp;newwindow=1&amp;qscrl=1&amp;sclient=psy-ab&amp;q=org mode &amp;qscrl=1&amp;oq=&amp;gs_l=&amp;pbx=1&amp;fp=3e0aac4b0855dc98&amp;ion=1&amp;bav=on.2,or.r_gc.r_pw.r_cp.r_qf.&amp;biw=1130&amp;bih=932">Google search</a>.
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Time Tracking]]></title>
    <link href="http://www.neilsmithline.com/blog/2012/08/04/time-tracking/"/>
    <updated>2012-08-04T19:29:00-04:00</updated>
    <id>http://www.neilsmithline.com/blog/2012/08/04/time-tracking</id>
    <content type="html"><![CDATA[<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">The Quantified Self</h2>
<div class="outline-text-2" id="text-1">

<p>A couple of months ago I heard about this <del>nerdy</del> cool movement called <a href="http://en.wikipedia.org/wiki/Quantified_Self">Quantified Self</a>. Its goal is improving life by leveraging organized data about yourself. The ideas behind Quantified Self are far from new. Recording your caloric intake with the aim of reaching a goal, ie: counting calories, has been around for&hellip; well for a long time.
</p>
<p>
The Quantified Self movement takes old principles, such as calorie counting, and improves upon them in two key ways:
</p><ul>
<li><b>QS is more of an atitude than an activity.</b> Tracking calories, cholesterol levels, blood pressure, etc&hellip; are generally targeted at a very specific goal. For example, a baseball player that records his batting performance against different pitchers is looking to be a better batter. The Quantified Self movement encourages people to look for new means of measurement, as wel as to use existing means of measurement differently, with no single goal. If you will, QS is an umbrella encompassing both old and new tools.
</li>
<li><b>Technology is a game changer.</b> Almost overnight it became possible to measure and record huge amounts of data about yourself. This ranges from relatively low-tech activities such as &#8220;checking in&#8221; to a social network during the day or using an online to-do management system to <a href="http://fitbit.com">multipurpose devices</a> that collect fairly complex data.
</li>
</ul>


</div>

</div>

<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">My Project</h2>
<div class="outline-text-2" id="text-2">

<p>Beinng the type of person who likes <del>nerdy</del> cool things, I got all excited the moment I heard about QS. After toying around with some ideas I decided to monitor my daily activities with the goal of using my time more wisely.
</p>
<p>
I am not referring to the type of activity data you can get from your <a href="http://en.wikipedia.org/wiki/Filofax">Filofax</a> or the detailed location data that a service such as <a href="http://en.wikipedia.org/wiki/Google_Latitude">Google Latitude</a> provides. I am going to <a href="http://en.wikipedia.org/wiki/Sample_(statistics)">sample</a> my activity several dozen times a day.
</p>
<p>
I have a <a href="https://github.com/Neil-Smithline/time-tracking-experiments/">living document and code repository</a> that discusses my goals in more detail. I also have a <a href="https://github.com/Neil-Smithline/time-tracking-experiments/blob/1254eb4cb744305f66f547fbccfc0189db542198/README.org">snapshot</a> taken at the time of writing this.
</p>
<p>
Besides documenting my goals, I have tried, for the first time, to keep a <a href="http://www.neilsmithline.com/time-tracking-experiments/journal.html">journal</a> of the problem solving process as I was going through it. To reduce the overhead of maintaining a journal I have left it pretty raw so please forgive its informal presentation.
</p>
</div>

</div>

<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">Implementing Time Tracking</h2>
<div class="outline-text-2" id="text-3">

<p>The broad solution I&#8217;ve implemented in my time tracking experiment is documented in the living document and journal referenced above. To save time, I&#8217;ll not duplicate what is documented there. What I will discuss is my first solution, perhaps my first prototype of the time tracking system.
</p>
<p>
The goal is to track my activities via my ever-handy Android phone and record that data in a structured manner on my computer. Due to my personal preferences, I&#8217;m storing the data in <a href="http://www.orgmode.org">Org Mode</a> but the concepts are not limited to Org Mode.
</p>
<p>
Being that I&#8217;m storing my data in Org Mode and using Org Mode as my task manager, the solution has a very Org Mode&#8217;ish feel. I&#8217;ll try to explain enough about Org Mode so that you can follow.
</p>
</div>

</div>

<div id="outline-container-4" class="outline-2">
<h2 id="sec-4">In Next posting</h2>
<div class="outline-text-2" id="text-4">

<p>I&#8217;m going to post this blog entry in two parts because my time tracking system just interrupted me, asking for a sampling of my activity. When I responded to the request I saw that I&#8217;ve used up the time I&#8217;ve allotted for blogging today so I&#8217;m putting this aside for now.
</p>
<p>
PS: I don&#8217;t think I&#8217;ve mentioned it before but my time tracking system provides instantaneous feedback. Every time it requests a sample of my activity it tells me how long I&#8217;ve been doing that activity as well as all the other activities I&#8217;ve done during the day. This allows me to immediately alter my behavior without waiting for longer-term analyses. Definitely cool (OK, and nerdy too).
</p></div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blurring Static And Dynamic Blogs]]></title>
    <link href="http://www.neilsmithline.com/blog/2012/07/22/blurring-static-and-dynamic-blogs/"/>
    <updated>2012-07-22T18:23:00-04:00</updated>
    <id>http://www.neilsmithline.com/blog/2012/07/22/blurring-static-and-dynamic-blogs</id>
    <content type="html"><![CDATA[<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">Static Blogging</h2>
<div class="outline-text-2" id="text-1">

<p>I&#8217;ve discussed the pros and cons about static blogging <a href="http://www.neilsmithline.com/blog/categories/blogging-tech/">many times</a> before. In summary, the cons are that, well that your blog is static. No surprise there.
</p>
<p>
Fortunately, there are ways to push the limits of static blogging so that it is not quite so static.
</p>
</div>

</div>

<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">Website Hosting</h2>
<div class="outline-text-2" id="text-2">

<p>Unless you are self-hosting your <a href="http://octopress.org">Octopress</a> or <a href="http://jekyllrb.com">Jekyll</a> blog, you are using another site to host your blog. I host mine on Github. They have a web server running 24x7 to host it. But that&#8217;s not my problem. I just use their (free) services.
</p>
<p>
I understand that website hosting isn&#8217;t a terribly exciting example of stretching the bubble of static blogging, but it is an example nonetheless. Dynamic blogs require specialized software running on their hosting computer to work. Static blogs tend to be able to run on generic web servers but there still must be a web server or there&#8217;s no blog.
</p>
</div>

</div>

<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">JavaScript Helps</h2>
<div class="outline-text-2" id="text-3">

<p>Out of the box, Octopress comes with some features to show your most recent tweets as well as recent activity within your <a href="http://github.com">Github</a> repositories. This is dynamic data that Octopress implements with some JavaScript.
</p>
<p>
Just to be clear, by <i>dynamic data</i> I mean that the data displayed on the page may change without a republication of the blog. I am not necessarily referring to a scrolling widget or something. Just dynamic data. 
</p>
<p>
Conversely, JavaScript can be used to dynamically display static data. That is, data that is embedded in the source of the web page. Being that the data is embedded in the page&#8217;s source at or before publication time, it is assuredly <i>static data</i>.
</p>
<p>
But client-side JavaScript (ie: JavaScript running in the user&#8217;s browser) has its limits. For example, if you want to send a tweet whenever you add a new blog entry, client-side JavaScript is going to have a hard time at it.
</p>


<!-- more -->

</div>

</div>

<div id="outline-container-4" class="outline-2">
<h2 id="sec-4">Pushing Beyond Web Hosting JavaScript</h2>
<div class="outline-text-2" id="text-4">

<p>The trick behind adding a much wider array of dynamic features to your <i>static</i> blog is:
</p><blockquote>

<p>Integrate with external web services and let them do the work for you.
</p>
</blockquote>


<p>
It is even better if you can let other sites do the hard work for you free of charge. For example, Github is hosting this blog at no cost to me. Thank you Github! But Github won&#8217;t tweet about my new blog postings or search through my website. Fortunately, there are services that will happily do that for you.
</p>

</div>

<div id="outline-container-4-1" class="outline-3">
<h3 id="sec-4-1">Site Search</h3>
<div class="outline-text-3" id="text-4-1">

<p>This blog&#8217;s search functionality is provided by Google. Dynamic blogging systems such as <a href="http://joomla.org">Joomla</a> have a large array of <a href="http://extensions.joomla.org/extensions/search-a-indexing">search extensions</a> that you can run on your server to provide various searching features. I&#8217;m sure that they provide a much larger set of functionality than my site&#8217;s Google search provides. 
</p>
<p>
Richer functionality or not, each extension needs to be installed, configured, and maintained. With Octopress, you never need to think about your site&#8217;s search functionality. The site comes preconfigured for Google site search. That works for me.
</p>
</div>

</div>

<div id="outline-container-4-2" class="outline-3">
<h3 id="sec-4-2">Automated Tweeting</h3>
<div class="outline-text-3" id="text-4-2">

<p>There are many ways to tweet via an email message but there is no way, at least none that I&#8217;ve bothered to think through, to get Github to send emails formatted for a tweet whenever you post. But, there are many sites that will watch your blog for change and perform some activity when your blog changes.
</p>
<p>
Exactly which site you use depends on what your needs are. For automated tweeting I decided to use <a href="http://feedburner.com/">FeedBurner</a>. If you&#8217;re unfamiliar with FeedBurner, it provides a web service that takes your site&#8217;s RSS/Atom feed as input and adds value to that feed. My site&#8217;s RSS feed is <a href="http://feeds.feedburner.com/MyGeekdom">http://feeds.feedburner.com/MyGeekdom</a>. Assuming you don&#8217;t have uncommon browser settings, if you visit that URL  you will see something that looks like: 
</p>
<p>
<img src="http://www.neilsmithline.com/assets/screen-snapshots/feedburner.png"  alt="http://www.neilsmithline.com/assets/screen-snapshots/feedburner.png" />
</p>
<p>
Amongst the multitude of options that FeedBurner provides is the ability to subscribe to a site by email. So I subscribed myself, using a unique email alias, to FeedBurner emails about updates to my site. I then created an email filter that automatically forwards the FeedBurner emails to my tweeting email address and <i>voila</i>, whenever I post a new article I automatically produce a tweet <a href="https://twitter.com/neil_smithline/status/227220890109218816">like this one</a>.
</p>
</div>

</div>

<div id="outline-container-4-3" class="outline-3">
<h3 id="sec-4-3">Tracking &#8220;The Buzz&#8221;</h3>
<div class="outline-text-3" id="text-4-3">

<p>&#8220;The Buzz&#8221;, also known as &#8220;Trending&#8221; or simply &#8220;current events&#8221;, is a term to describe what is popular on the internet at any given moment. While tracking all of the internet&#8217;s news doesn&#8217;t seem appropriate for a blog, tracking news related to your blog posting may be desirable.
</p>
<p>
Courtesy of <a href="http://socialmention.com">SocialMention</a>, many of my blog postings have current news in the sidebar (see <a href="http://www.neilsmithline.com/blog/2012/07/15/bookifying-news/">example blog posting</a>). In many ways this is similar to tracking a Twitter #hashtag. But SocialMention gathers data from many dozens of web sites providing a richer and more diverse collection of data than Twitter can. 
</p>
<p>
For example, by tracking several popular bookmarking sites such as <a href="http://delicious.com">Delicious</a>, SocialMention can tell you what pages people are bookmarking that are related to your blog posting. Most people, thankfully, don&#8217;t send a tweet whenever they bookmark a site.
</p>
<p>
While it may be redundant to state,
</p><blockquote>

<p>Displaying current events on your blog postings means that they will always have current information.
</p>
</blockquote>


<p>
This means that there&#8217;s no need to update your blog posting with links to relevant websites as new information becomes available. That is clearly a task that would become unmanageable as your blog grows. Instead, your <i>static blog</i> will always have <i>dynamic data</i> on it.
</p>
</div>
</div>

</div>

<div id="outline-container-5" class="outline-2">
<h2 id="sec-5">The Age Of Cloud Computing</h2>
<div class="outline-text-2" id="text-5">

<p>While my blog is far from a large operation, the advent of <a href="http://en.wikipedia.org/wiki/Cloud_computing">cloud computing</a> has made these dynamic features possible. From tiny systems like my blog to large systems like Google&#8217;s search engine, cloud computing is about wiring together the most appropriate services in a manner that produces your desired functionality with a minimal amount of setup, cost, and maintenance.
</p>
<p>
While I don&#8217;t have exact dates, my automated tweeting on new blog posts has been working maintenance free long enough that I forgot that I had implemented it until I noticed that I had just tweeted about my previous blog posting. I believe that is the very definition of &#8220;minimal maintenance&#8221;.
</p>
<p>
Given the large and growing number of web services in the cloud and my limited time to explore them, I&#8217;m sure that this is but a small sampling of the different ways to use dynamic data in static blogs.
</p></div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Desktop Time Tracking]]></title>
    <link href="http://www.neilsmithline.com/blog/2012/07/21/desktop-time-tracking/"/>
    <updated>2012-07-21T20:17:00-04:00</updated>
    <id>http://www.neilsmithline.com/blog/2012/07/21/desktop-time-tracking</id>
    <content type="html"><![CDATA[<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">Motivation</h2>
<div class="outline-text-2" id="text-1">

<p>Recently I&#8217;ve been trying to improve my time management skills. This is further discussed in this <a href="https://github.com/Neil-Smithline/time-tracking-experiments">Github README</a> file. I have also been keeping a <a href="http://www.neilsmithline.com/time-tracking-experiments/journal.html">journal</a> my activities and thoughts as I work on this project. You may also wish to read up on the <a href="http://en.wikipedia.org/wiki/Quantified_Self">Quantified Self</a>.
</p>
</div>

</div>

<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">Basic Activity Tracking</h2>
<div class="outline-text-2" id="text-2">

<p>While I had not initially planned to focus on Mac OS X time tracking, it turned out to be easy. For a couple of weeks I&#8217;ve been playing around with two Mac OS X applications that track your computer activities: <a href="http://timingapp.com/">Timing</a> (actually <i>Timing Lite</i>) and <a href="http://manytricks.com/timesink/">Time Sink</a>.
</p>
<p>
Time Sink integrates with Mac OS X to track the <i>active</i> or <i>foreground</i> application and provides a variety of reports to display that information. In addition to tracking the current app, Time Sink tries to track what you were doing in that app. It achieves this by using a relatively low-tech process of collecting the active window&#8217;s name.
</p>
<p>
While a window name does not seem like a lot of information, it turns out to be surprisingly useful. From the window name Time Sink distinguishes, for example, the amount of time you spent browsing Facebook from the amount of time you spent browsing Github.
</p>
<p>
Time Sink can harvest this data from any app that includes information about the current activity. This includes editors that put the file being edited in the window name, media plays that put the title of what is currently being played, etc&hellip;
</p>
<p>
Your activities get displayed in a nice graphical format:
<img src="http://www.neilsmithline.com/assets/screen-snapshots/Time-Sink-Activities.png"  alt="http://www.neilsmithline.com/assets/screen-snapshots/Time-Sink-Activities.png" />
</p>
<p>
Due to browser page size I&#8217;ve excluded information such as how long I did these activities were as well as when I was doing them.
</p>
<p>
In addition to the activity tracking performed by Time Sink, Timing has some <a href="http://timingapp.com/faq.php#compatibility">application-specific</a> functionality that allows it to better track what you are doing inside an app.
</p>


<!-- more -->

</div>

</div>

<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">From Activity Tracking To Category Tracking</h2>
<div class="outline-text-2" id="text-3">

<p>The real power of these apps is that they allow you to categorize your activities. For example, you can specify that time spent browsing Facebook is socializing while time spent on Github is developing and exploring open-source.
</p>
<p>
My open source development category includes:
</p><ul>
<li>Time spent browsing Github.
</li>
<li>Time spent editing files in <code>$HOME/coding</code>, the root of all of my open-source Github projects.
</li>
<li>Time spent in a shell while the current directory is in <code>$HOME/coding</code> directory or one of its subdirectories.
</li>
<li>Other stuff not worth describing here.
</li>
</ul>


<p>
Due to its fine-granularity and inability to associate activities across apps, the activity tracking data is not that useful. But, once it is categorized, called <i>Pooling</i> by Time Sink, it starts to provide much more useful information. Consider this screen snapshot:
<img src="http://www.neilsmithline.com/assets/screen-snapshots/Time-Sink-Activities.png"  alt="http://www.neilsmithline.com/assets/screen-snapshots/Time-Sink-Activities.png" />
</p>
<p>
In it you can see that I was spending time on time management. This included time spent in three different apps.
</p>
<p>
Both Time Sink and Timing have a convenient, drag-and-drop mechanism for adding activities to categories.
</p>
</div>

</div>

<div id="outline-container-4" class="outline-2">
<h2 id="sec-4">Choosing Between Timing And Time Sink</h2>
<div class="outline-text-2" id="text-4">

<p>Today, the end of my 2-week trial period, I decided to purchase Time Sink because of its ability to automatically export data into a CSV file. Besides the automatic scheduling, Time Sink allows you to specify what data is exported as well as whether you want the export to include all data that Time Sink has stored or only data since the last automated export. Being that I want to use <a href="http://orgmode.org">Org Mode</a> as my data repository, this data exporting feature sealed the deal for me.
</p>
<p>
That said, I feel that Timing and Time Sink are on par with each other. Each app costs &lt; $10US so cost is not a factor. Each app has its own pros and cons. Time Sink just fit my specific needs.
</p>
</div>

</div>

<div id="outline-container-5" class="outline-2">
<h2 id="sec-5">Analyzing The Data</h2>
<div class="outline-text-2" id="text-5">

<p>To state the obvious, collecting time usage data is only useful if you can analyze it such that it improves your time management skills. This is where Org Mode comes into play. With a bit of tweaking, the CSV importer from <a href="https://github.com/novoid/Memacs">Memacs</a> will be able to import this data into Org Mode.
</p>
<p>
Org Mode provides a rich set of features regarding scheduling and time management:
</p><ul>
<li>Standard task/to-do list management features.
</li>
<li>Comparing actual time spent v. estimated time.
</li>
<li>Identifying if you are falling behind on a long-term task.
</li>
<li>Summarizing your time usage.
</li>
<li>Sophisticated tracking of repeating tasks.
</li>
<li>An integrated archive management framework that allows you to focus on the most pertinent information while maintaining all historical data.
</li>
<li>Tons more.
</li>
</ul>


</div>

</div>

<div id="outline-container-6" class="outline-2">
<h2 id="sec-6">Early Payoffs</h2>
<div class="outline-text-2" id="text-6">

<p>Being as I&#8217;m planning on using Org Mode to perform data analysis and I am not yet able to import Time Sink data into Org Mode, one would think that there would be no immediate benefit of having this system working. I thought that would be the case. But I was wrong.
</p>
<p>
For some time I&#8217;ve used a timer that pops up every 15 minutes just to remind me that time is passing. I call it my <i>Focus Alert</i> timer as it reminds me to make sure I&#8217;m doing what I should be doing. When I&#8217;m notified I can stand up and stretch, check the clock to make sure I&#8217;m not late for something, make sure I&#8217;m working on my highest priority task, etc&hellip;
</p>
<p>
Today I modified my Focus Alert (a small shell script) so that it helps me track my time with Time Sink. Before today&#8217;s modification, my Focus Alert simply popped up a notification box that I had to click to close. As you may imagine, clicking quickly became second-nature.
</p>
<p>
Starting today, my Focus Alert interrupts my work and displays the Time Sink application. While I can immediately switch back to whatever I was doing before the notification, it is rather difficult not to notice Time Sink&#8217;s data. For example, about two sentences ago my Focus alert went off. As you can see in this screenshot of the relevant part of the Time Sink window:
<img src="http://www.neilsmithline.com/assets/screen-snapshots/Time-Sink-Blog-Posting.png"  alt="http://www.neilsmithline.com/assets/screen-snapshots/Time-Sink-Blog-Posting.png" />
</p>
<p>
I&#8217;ve spent about an hour on this blog posting. As Time Sink is kind enough to distinguish wall-clock time from actual activity time, that hour is a very reliable statement about my activity.
</p>
<p>
Being that I don&#8217;t think this blog posting is worth more than an hour of my, I would have allocated 30-45 minutes top, I&#8217;m ending the posting here.<sup><a class="footref" name="fnr.1" href="#fn.1">1</a></sup>
</p>
<p>
I hope to follow-up this posting with more blog postings as well as <a href="http://www.neilsmithline.com/time-tracking-experiments/journal.html">journal</a> entries as I try to understand what I&#8217;m doing and then make myself more efficient.
</p>
</div>

</div>

<div id="outline-container-7" class="outline-2">
<h2 id="sec-7">UPDATE <span class="timestamp-wrapper"> <span class="timestamp">2012-07-22 Sun 15:50</span></span></h2>
<div class="outline-text-2" id="text-7">

<p>Sacha Chua (<a href="http://sachachua.com/blog/">blog</a>, <a href="https://twitter.com/sachac">twitter</a>) responded to one of my <a href="https://twitter.com/neil_smithline/status/225408627643650048">tweets</a> about integrating Org Mode and Quantified Self. She pointed me towards this <a href="http://sachachua.com/blog/2012/05/quantified-awesome-blogging-wpm-and-the-speed-of-reflection/">blog posting</a>. In it she discusses how she uses Org Mode to track her blog writing time. Not only does she use Org Mode to track her activities, she uses it to track her <a href="http://en.wikipedia.org/wiki/Wpm">WPM</a> while writing blog posts. She averages 16 WPM while blogging.
</p>

<div id='footnotes'>
<h4 class='footnotes'>Footnotes: </h4>
<div id='text-footnotes'>
<p class="footnote"><sup><a class="footnum" name="fn.1" href="#fnr.1">1</a></sup> After reading Sacha&#8217;s post, I decided to calculate my WPM for this blog post. It turns out that I typed 15 WPM (actually 14.79729729&hellip;). I&#8217;ll have to readjust my estimates for blogging as I don&#8217;t think I can hope to outperform the industrious Sacha Chua. Especially being that she types 110 WPM at full speed!
</p>


</div>
</div>

</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bookifying News]]></title>
    <link href="http://www.neilsmithline.com/blog/2012/07/15/bookifying-news/"/>
    <updated>2012-07-15T10:09:00-04:00</updated>
    <id>http://www.neilsmithline.com/blog/2012/07/15/bookifying-news</id>
    <content type="html"><![CDATA[<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">Bookifying News</h2>
<div class="outline-text-2" id="text-1">

<p>I frequently find it convenient to take a <i>website on the road</i>. That is, I want a website or part of a website in a convenient, portable, easily accessible format on my <a href="http://en.wikipedia.org/wiki/Asus_Eee_Pad_Transformer">Asus Transformer</a> tablet. The Transformer has <a href="http://en.wikipedia.org/wiki/802.11n">WiFi</a> but no <a href="http://en.wikipedia.org/wiki/GSM_services#Data_transmission">mobile data</a>. Without a portable means of accessing a website, the lack of data plan would dramatically limit the usability of my tablet.
</p>
<p>
I have taken to <i>bookifying</i> websites that I have an interest in staying up to date with (eg: <a href="http://xkcd.com">XKCD</a>). For most sites, I only care about the newest postings. I convert the newest posting into an <a href="http://en.wikipedia.org/wiki/EPUB">epub</a> book, load it onto my tablet, and then read it using one an <a href="http://en.wikipedia.org/wiki/Ebook_reader">ebook reader</a>.
</p>
<p>
Besides bookifying the newest articles on <a href="http://lifehacker.com">LifeHacker</a>, I have also bookified entire websites.
</p>
<p>
The cool part is, this process requires a one-time configuration and then works automatically. That is, the entire web sites sit on my tablet and old website articles are automatically replaced by the new ones. 
<!-- more -->

</p></div>

</div>

<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">The Process</h2>
<div class="outline-text-2" id="text-2">

<p>The bookification process utilizes the following tools:
</p><ul>
<li>The <a href="http://www.wikipedia.com/Foss">FOSS</a> epub creation and library management tool <a href="http://en.wikipedia.org/wiki/Calibre_(software)">Calibre</a>.
</li>
<li>The <a href="http://www.jrtstudio.com/CheetahSync">Cheetah Sync</a> <a href="http://en.wikipedia.org/wiki/File_synchronization">file-synchronization</a> application for <a href="http://en.wikipedia.org/wiki/Android_(operating_system)">Android</a>.
</li>
<li>The <a href="https://play.google.com/store/apps/details?id=com.flyersoft.moonreaderp&amp;feature=related_apps#?t=W251bGwsMSwxLDEwOSwiY29tLmZseWVyc29mdC5tb29ucmVhZGVycCJd">Moon+</a> Android book reader.
</li>
</ul>


<p>
Calibre comes packed with features for downloading new postings on a website, converting them to an epub book, and then managing the library it creates. It has nice extras such as updating sites on a customizable schedule and allowing you to specify how many ebooks of a site you wish to keep (eg: just today&#8217;s publication or an entire week&#8217;s worth).
</p>
<p>
Cheetah Sync provides WiFi folder synchronization between your desktop (Mac OS X or Windows) and your Android tablet. This synchronization can happen on a schedule or manually to reduce battery usage.
</p>
<p>
Moon+ is one of a large number of Android book readers. It seems to facilitate being used on a rotating library such as Calibre&#8217;s by monitoring a directory on the file system and responding appropriately to changes.
</p>
<p>
The end product of this is the LifeHacker website on my Transformer:
</p>
<div style="text-align: center">
<p><img src="http://farm9.staticflickr.com/8284/7576840720_3b50e3b359_z.jpg"  alt="http://farm9.staticflickr.com/8284/7576840720_3b50e3b359_z.jpg" />
</p>
</div>

<p>
As a bonus, Calibre comes with a built-in epub book reader that you can run on your desktop:
</p>

<div style="text-align: center">
<p><img src="http://farm9.staticflickr.com/8015/7576921304_54fbbc35b6.jpg"  alt="http://farm9.staticflickr.com/8015/7576921304_54fbbc35b6.jpg" />
</p>
</div>

<p>
The output is less-cluttered that the site; seeming like a <a href="http://readability.com">Readibility</a> or <a href="http://instapaper.com">InstaPaper</a>
version of the all new content on the site.
</p>
</div>

</div>

<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">Books And Websites</h2>
<div class="outline-text-2" id="text-3">

<p>Besides using Calibre to create epub books, it also does a good job of managing existing ones. For example, <a href="http://www.sapphiresteel.com">SapphireSteel Software</a> (whose name is an esoteric reference to a late 1970&#8217;s British <a href="http://en.wikipedia.org/wiki/Sapphire_&amp;_Steel">TV show</a>) have published an epub book called <a href="http://www.sapphiresteel.com/The-Little-Book-Of-Ruby">The Little Book Of Ruby</a>. I&#8217;m learning Ruby and sometimes it is nice to be able to look up something when I&#8217;m not near a WiFi connection and don&#8217;t want to use my mobile WiFi hotspot as that tends to get costly quickly.
</p>
<p>
Calibre also provides a means for bookifying entire websites or a specified portion of them. This works by creating a temporary copy of the website on your computer and then converting it to epub format with Calibre.
</p>
<p>
Calibre provides its own <a href="http://manual.calibre-ebook.com/cli/web2disk.html">web2disk</a> utility that can download a website to your local disk. Sites such as <a href="http://www.teleread.com/drm/the-abcs-of-format-conversion-for-the-kindle-sony-and-nook-plus-some-calibre-tips/">this one</a> cover the details of this conversion. 
</p>
<p>
I happen to be familiar with the more fleible but more complex Linux program <a href="http://curl.haxx.se/docs/manpage.html">curl(1)</a> and tend to use that to download an entire website. This <a href="https://www.google.com/webhp?ie=UTF-8&amp;ion=1#hl=en&amp;newwindow=1&amp;q=download+website+using+curl&amp;qscrl=1&amp;oq=download+website+using+curl&amp;fp=1">Google search</a> has numerous references on using curl to download a website.
</p>
<p>
While Moon+ is my preference for ebook news due to its responsiveness in dealing with an externally managed library, I prefer uploading my books to <a href="http://amazon.com">Amazon</a>&#8217;s Kindle library. For me, the Kindle&#8217;s synchronization of bookmarks, notes, and current reading location are of much greater importance when I&#8217;m reading a book than when I&#8217;m reading a website. I use the <a href="http://www.amazon.com/gp/feature.html/ref=kcp_and_ln_ar?docId=165849822">Kindle for Android</a> app on my tablet and smartphone and the <a href="http://www.amazon.com/gp/feature.html/ref=sv_kstore_1?ie=UTF8&amp;docId=1000493771">Kindle for desktop or browser</a> from my computer.
</p>
<p>
While Kindle doesn&#8217;t directly support the epub format, there are <a href="http://techsupport.foreverwarm.com/how-to-read-epub-books-on-your-kindle">simple directions</a> for converting epub ebooks to Kindle format using Calibre. This is a page from the <a href="http://www.orgmode.org">Org Mode</a> website ebook on my Transformer Kindle:
</p>

<div style="text-align: center">
<p><img src="http://farm9.staticflickr.com/8167/7577094056_656f76bc81.jpg"  alt="http://farm9.staticflickr.com/8167/7577094056_656f76bc81.jpg" />
</p>
</div>

</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yahoo! Forgets To Proofread Emails?]]></title>
    <link href="http://www.neilsmithline.com/blog/2012/07/01/yahoo-cancellation-notice/"/>
    <updated>2012-07-01T21:33:00-04:00</updated>
    <id>http://www.neilsmithline.com/blog/2012/07/01/yahoo-cancellation-notice</id>
    <content type="html"><![CDATA[<p>
<b>Update: <span class="timestamp-wrapper"> <span class="timestamp">2012-07-04 Wed</span></span></b> Today <a href="http://en.wikipedia.org/wiki/Igoogle">iGoogle</a> had a notice at the top saying tat Google was discontinuing the service in <b>November 2013</b>! The cancellation notice had this <a href="http://bit.ly/O5prY1">Learn more</a> link. Yahoo!&#8217;s cancellation notice looks even worse when in the shadow of Google&#8217;s.
</p>

<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">Yahoo! Notification</h2>
<div class="outline-text-2" id="text-1">

<p><a href="http://yhoo.it/Lr5viI">Yahoo! Groups</a> is <a href="http://yhoo.it/Lr5mfc">Yahoo!</a>&#8217;s version of public groups or forums. I used to think that it was one of the better group sites so I tended to use it. Over time I thought that it fell behind the pack and I stopped using it. I never deleted any of my groups. They had no confidential data and they were ocassionally handy to have around for historical purposes.
</p>
<p>
On June 29 I received an email from <a href="http://yhoo.it/Lr5mfc">Yahoo!</a> informing me that they are shutting down some of their group features. 
</p>
</div>

</div>

<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">Is There A Proofreader In The House?</h2>
<div class="outline-text-2" id="text-2">

<p>I frequently notice errors in emails I get but I know that I frequently send emails with errors in them. Most emails are just not worth the trouble of iterating on until it is perfect. But I typically expect large companies to send professional looking emails. The email Yahoo! sent me was anything but professional.
</p>
<p>
Rather than list the problems, I think looking at my annotations of their email is simpler:
</p>
<p>
<img src="http://www.neilsmithline.com/assets/images/YahooGroupsClosing.png"  alt="http://www.neilsmithline.com/assets/images/YahooGroupsClosing.png" />
</p>
</div>

</div>

<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">5 Days &ndash; You Gotta&#8217; Be Kidding</h2>
<div class="outline-text-2" id="text-3">


<!-- more -->
<p>
Ignoring the formatting mistakes, Yahoo! gave me only five days to backup my data before the service was to be shutdown and all data erased. Five days? If you don&#8217;t count the weekend and the July 4 US holiday, then they gave me two days to get my data.
</p>
<p>
Furthermore, while they state that I should backup my data, they don&#8217;t provide any directions or pointers telling me how to do such. 
</p>
</div>

</div>

<div id="outline-container-4" class="outline-2">
<h2 id="sec-4">Conclusion</h2>
<div class="outline-text-2" id="text-4">

<p>This was one email regarding one of the ?hundreds? of services Yahoo! offers. As such, I don&#8217;t want to make broad generalizations about Yahoo! based on this email. That said, for several years I have been concerned with relying too much on Yahoo! services because I feel the company is not doing well. In particular, I have avoided any serious use of <a href="http://bit.ly/Lr7of6">Yahoo! Pipes</a>, a tool that allows you to quickly create implement and deploy data processing services.
</p>
<p>
Being that Yahoo! seems to feel that five days is enough warning to shut down a service, I&#8217;ll now be extra certain not to use Yahoo! for anything that I care about losing. This just reinforces my decision to only use <i>Yahoo! Pipes</i> for quick prototyping. It is a shame because <i>Yahoo! Pipes</i> are a wonderful tool.b
</p></div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The New, Privacy Invading, Facebook Like Button]]></title>
    <link href="http://www.neilsmithline.com/blog/2012/06/14/the-new-privacy-invading-facebook-like-button/"/>
    <updated>2012-06-14T10:51:01-04:00</updated>
    <id>http://www.neilsmithline.com/blog/2012/06/14/the-new-privacy-invading-facebook-like-button</id>
    <content type="html"><![CDATA[<p>
(<a href="http://bit.ly/NADZTP">Background information</a> about online advertising.)
</p>

<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">Facebook Keeping Tabs On You</h2>
<div class="outline-text-2" id="text-1">

<p><a href="http://on.fb.me/L787EG">Facebook</a> has announced that it will sell user <a href="http://on.mash.to/L789wg">tracking information</a> to its
advertisers. Facebook, following in the steps of other large web <a href="http://bit.ly/NAEA84">advertising publishers</a> such as <a href="http://bit.ly/Kk80BT">Google</a>, claims that <a href="http://bit.ly/NAyR1R">targetted advertisements</a> are a <i>win-win</i> deal.
Advertisers win because they are able to provide ads that have a greater chance of
being <a href="http://bit.ly/L78I9p">clicked</a> and, hopefully, higher profit for the advertiser.
</p>
<p>
Users win because they see ads that they are more pertinent to their interests. For
example, a user who frequents technology websites may not have a strong interest in
an ad for laundry detergent. But that same user may appreciate ads about the newest
gadgets.
</p>
<p>
So, <i>win-win</i>! Everybody&#8217;s happy.
</p>
</div>

</div>

<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">Even I Can Count To Three</h2>
<div class="outline-text-2" id="text-2">


<p>
The phrase <i>win-win</i> implies that there are two involved parties. Facebook, Google, and other companies that track users for targeted ads seem to forget to mention that there are three involved parties:
</p>
<ol>
<li>The advertiser
</li>
<li>The user
</li>
<li>The publisher, that is the company selling the advertising
</li>
</ol>


<p>
Perhaps <i>win-win-win</i> is a more apropos statement than <i>win-win</i>.  The advertiser wins because their ads have a higher click-through rate, users win because they see ads that they are more interested in, and the publisher wins because they can charge a premium for targeted ads. For years Google has been running an instantaneous, automated <a href="http://bit.ly/NAzmZX">auction</a> so that Google gets the highest price possible for its ads.
</p>
<p>
A higher click-through rate is especially important for Facebook. Besides Facebook&#8217;s <a href="http://engt.co/NAAf4x">new obligation</a> to its shareholders, Facebook has a notoriously low click-through rate. From a 2010 <a href="http://tcrn.ch/NAzZ5N">TechCrunch article</a>:
</p><blockquote>

<p>Biggest [advertising presence] doesn&#8217;t mean most profitable. Facebook might be serving up more ads than almost anyone else, but they are still selling at very low ad rates because they perform poorly for the most part. If Facebook can figure out a way to make the ads on its site become more relevant and useful, it has a lot of room to boost its ad rates.
</p>
</blockquote>




<!-- more -->

</div>

</div>

<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">Facebook&#8217;s Dilemma</h2>
<div class="outline-text-2" id="text-3">

<p>While Facebook is forced to look for ways to increase their revenue via targeted
advertising, users tend to feel that having their internet usage being tracked is a
<a href="http://bit.ly/NAFtxi">privacy invasion</a>. As user tracking becomes more accurate, and hence more valuable to
Facebook and other advertising publishers, it is also viewed by users as a greater
invasion of privacy.
</p>
<p>
For years Facebook has been tracking users&#8217; activities as they roam the pages of Facebook. Facebook has also been gathering information about what non-Facebook pages users <a href="http://bit.ly/KIZZ8L">like</a>. These two types of tracking have a common property:
</p><blockquote>

<p>Facebook only tracks users when they interact with Facebook.
</p>
</blockquote>


<p>
Whether the interaction is on the Facebook site or on another site where a user does a Facebook share or like.
</p>
</div>

</div>

<div id="outline-container-4" class="outline-2">
<h2 id="sec-4">Facebook&#8217;s Bait And Switch</h2>
<div class="outline-text-2" id="text-4">


<p>
The change in user tracking that Facebook announced is that they will track users even if they do not interact directly with Facebook. Facebook will now gather users&#8217; behavior whenever a user visits a site that has any Facebook code on it. That includes every page that has the ubiquitous:
<img src="http://upload.wikimedia.org/wikipedia/commons/1/13/Facebook_like_thumb.png"  alt="http://upload.wikimedia.org/wikipedia/commons/1/13/Facebook_like_thumb.png" /> 
button.
</p>
<p>
For years, Facebook has been facilitating websites to use its <i>Like</i> button as well as social widgets and other means of <a href="http://bit.ly/KJ4alc">Facebook integration</a> with your site. Facebook has discussed the <a href="http://bit.ly/KJ4Zdz">many benefits</a> this brings to website publishers.
</p>
<p>
Facebook&#8217;s change in user tracking has many ramifications:
</p>
<ol>
<li>After years of facilitating Facebook integration with websites, Facebook has
     unilaterally decided to make every one of those sites a data collector for
     Facebook. 
</li>
<li>Once Facebook starts gathering this data, Websites with Facebook integration will be providing Facebook with valuable information without receiving any compensation for that information.
</li>
<li>Short of not using Facebook, users cannot effectively <a href="http://bit.ly/KJ7Inj">opting out</a> of this data tracking.
</li>
<li>Some sites will have to update their privacy policy to reflect Facebook&#8217;s new data collection.
</li>
</ol>


<p>
Furthermore, Facebook says that this change will happen within the <a href="http://bloom.bg/KJ6CI8">next few weeks</a>, leaving users and websites little time to react to the change. 
</p>
</div>

</div>

<div id="outline-container-5" class="outline-2">
<h2 id="sec-5">Alternates</h2>
<div class="outline-text-2" id="text-5">

<p>Even if a website decided to make changes to their site, there are few options to the <i>Like</i> button that do not involve severing all Facebook integration. One solution would be to replace the <i>Like</i> button, along with badges from other sites, with a generic <a href="http://bit.ly/KJ91ma">social bookmarking widget</a>.
</p>
<p>
That said, only <a href="http://brightpinkstudio.com/pinkink/resources/social-bookmarking-widgets/3/">five of the top ten</a> social bookmarking widgets do not add tracking to their own widgets.
</p>
<p>
The bottom line is that Facebook, likely due to pressure from their recent IPO and their <a href="http://bit.ly/KJ9Ds6">plummeting stock price</a>, has decided to enlist, rather, <i>to draft</i> millions of sites into providing Facebook with valuable information at the cost of invading the users of those sites.
</p>
<p>
As this change in policy seems to leave Facebook as the only clear winner with users and other websites as losers, I think the phrase <i>win-lose-lose</i> is more appropriate Though probably not a good sales pitch.
</p>
</div>

</div>

<div id="outline-container-6" class="outline-2">
<h2 id="sec-6">Update <span class="timestamp-wrapper"> <span class="timestamp">2012-06-14 Thu 12:39</span></span></h2>
<div class="outline-text-2" id="text-6">

<p>Just saw that Facebook allowed its users to <a href="http://huff.to/JSfscI">vote</a> on the changes to its privacy policy. That said, comparing an old and a proposed privacy policy and understanding what the ramifications are is a very difficult task. Especially when there is little publicity about the voting process.
</p>
<p>
If if you heard about the voting, waded the through the privacy policy&#8217;s legal jargon, understood how the change would affect you, and decided to vote, your vote wouldn&#8217;t have counted.
</p>
<p>
Facebook said that they would consider any vote on their privacy policy as <i>advisory</i> unless a third of their 900M active users voted. The lack of publicity around the privacy policy change and  <a href="http://onforb.es/KYar2D">serious questions</a> about the veracity of Facebook&#8217;s claim of 900M active users all but guaranteed that, whatever the votes were, they would be <i>advisory</i>.
</p></div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SPG: The Secure Password Generator]]></title>
    <link href="http://www.neilsmithline.com/blog/2012/06/10/secure-password-generator/"/>
    <updated>2012-06-10T16:48:00-04:00</updated>
    <id>http://www.neilsmithline.com/blog/2012/06/10/secure-password-generator</id>
    <content type="html"><![CDATA[<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">As Users, We Must Expect Our Passwords To Be Compromised</h2>
<div class="outline-text-2" id="text-1">

<p>It is an unfortunate fact that, if you create accounts on websites, some of your passwords will be stolen. For example:
</p><ul>
<li>There has been a lot of recent press about <a href="http://linkd.in/Mz4gjU">LinkedIn</a>&#8217;s recent 6.5M <a href="http://yhoo.it/Mz4o2T">stolen passwords</a>. 
</li>
<li>In the week since LinkedIn&#8217;s attack became public, <a href="http://bit.ly/Mz4yHu">eHarmony</a> lost 1.5M passwords in an <a href="http://lat.ms/Mz4I1y">unrelated attack</a>. 
</li>
<li>Earlier in the year, an undisclosed number of <a href="http://bit.ly/LLAaXu">Zappos</a> 24M users had their <a href="http://bit.ly/LLAfdJ">passwords compromised</a>. 
</li>
<li>The <a href="http://bit.ly/LLB5Hl">attack</a> on Gawker Media&#8217;s collection of popular sites (<a href="http://gaw.kr/LLBedR">Gawker</a>, <a href="http://bit.ly/LLBf1y">Lifehacker</a>, <a href="http://bit.ly/LLBfhZ">Gizmodo</a>, <a href="http://bit.ly/LLBh9N">io9</a>,<a href="http://bit.ly/LLBhqe"> Jalopnik</a>, <a href="http://bit.ly/LLBfyC">Kotaku</a>, <a href="http://deadsp.in/LLBfyD">Deadspin</a>, and <a href="http://bit.ly/LLBhqh">Fleshbot</a>) in late 2010 that compromised 1.3M accounts shows that this is not a new phenomenon. 
</li>
</ul>


</div>

</div>

<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">Cascading Damages</h2>
<div class="outline-text-2" id="text-2">

<p>Having your password stolen from a website is a problem. But if you use the same password for many sites, the problem becomes a nightmare. I know that everyone tells you to use <a href="http://bit.ly/KWPdld">strong passwords</a> and to use a different password for each website &ndash; but few people do. A quick look at these <a href="http://bit.ly/KWPowF">Google search results</a> should be convince you that people just don&#8217;t follow that advice.
</p>
</div>

</div>

<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">The Reason Behind The Mega-Password Thefts</h2>
<div class="outline-text-2" id="text-3">

<p>Despite every assurance made by websites (eg: <a href="http://bit.ly/LLEqX3">LinkedIn</a>&#8217;s recent message), the only way a website can lose millions of passwords is if they just didn&#8217;t bother to follow standard security procedures for storing your password. So LinkedIn, Gawker, Zappos, etc.., didn&#8217;t care about your password&#8217;s security until a breach made it into the headlines.
<!-- more -->

As revolting as that fact is, it is accurate.
</p>
<p>
The trick to securely storing a user&#8217;s password is rather simple: don&#8217;t store the user&#8217;s password as it can&#8217;t be stolen if it is never stored. 
</p><blockquote>

<p>Huh?
</p>
</blockquote>


<p>
You heard me correctly. Websites should store a &lt;geek vernacular warning&gt; <i>salted hash</i> of your password rather than your password. Understanding the math and computer science behind salted hashes is unimportant. All you need to know is that the technology exists. If you are curious, you can read this <a href="http://bit.ly/LLGvlN">OWASP article</a> about salted hashes.
</p>
</div>

</div>

<div id="outline-container-4" class="outline-2">
<h2 id="sec-4">An Ounce Of Prevention</h2>
<div class="outline-text-2" id="text-4">

<p>The only way to protect yourself against these thefts is to, as everyone will tell you, use a unique, strong password for every site. Don&#8217;t worry, I won&#8217;t preach to you. You know that this is what should be done and I know that you know that this should be done.
</p>
<p>
There are two problems with this:
</p><ol>
<li>It is difficult to keep track of so many passwords.
</li>
<li>People are astoundingly bad at creating secure passwords.
</li>
</ol>


<p>
<a href="http://bit.ly/KWS3GH">Other than that, how was the play, Mrs. Lincoln?</a>
</p>
</div>

</div>

<div id="outline-container-5" class="outline-2">
<h2 id="sec-5">Tools And Reprogramming Are The Answer</h2>
<div class="outline-text-2" id="text-5">

<p>It turns out that the best solution to managing your passwords involves the use of tools and reprogramming. The tools are used to help you create unique passwords as well as remember them. The tools can be simple. For example, a handful of <a href="http://bit.ly/KWRhcK">dice</a> can be used to generate unique and secure passwords.
</p>
<p>
The reprogramming part is the more difficult. It involves you reprogramming your brain so that you protect yourself. Think of it as <i>safe surfing</i>.
</p>
</div>

</div>

<div id="outline-container-6" class="outline-2">
<h2 id="sec-6">The Answer Is&hellip;</h2>
<div class="outline-text-2" id="text-6">

<p>The answer is going to be in my next blog posting. I&#8217;ll present several tools and strategies, including one that I&#8217;m currently developing, that work better than carrying around a handful of <a href="http://bit.ly/KWRc90">zocchihedrons</a> :-)
</p></div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Ruby Project]]></title>
    <link href="http://www.neilsmithline.com/blog/2012/06/01/first-ruby-project/"/>
    <updated>2012-06-01T19:18:00-04:00</updated>
    <id>http://www.neilsmithline.com/blog/2012/06/01/first-ruby-project</id>
    <content type="html"><![CDATA[<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">The Project</h2>
<div class="outline-text-2" id="text-1">

<p>Typically, even my pet projects have a specific goal in mind. I don&#8217;t write a spec for my personal projects, there&#8217;s just a, maybe slightly fuzzy, goal. Generally I want something that will be useful. I&#8217;ll work on a project until:
</p><ul>
<li>The project does everything I hoped for. Maybe even more!
</li>
<li>I run out of spare time to work on it. This doesn&#8217;t happen as often as you may imagine. I really enjoy coding. So, after a tiring day of coding at the office, I come home to relax and work on one of my pet projects. If it was any different, then I have no right to call my blog <a href="http://bit.ly/yGGszW">My Geekdom</a>. 
</li>
<li>I decide that I did a poor job picking a pet project as they&#8217;re supposed to be fun and this projects isn&#8217;t. So long!
</li>
<li>I get stuck such that proceeding will require more effort than I feel it&#8217;s worth. That said, hopefully I learned something working on the project.
</li>
</ul>


<p>
But, unlike my typical pet projects, my goal with my new project is rather amorphous. I want to analyze some data. At time of writing this, I have just shy of 5K records totally 181MB of data. 
</p>
<p>
Leaving the details for a later posting, each record is a snapshot of the state of my <a href="http://bit.ly/Kfv0n2">Mac OS X</a> computer. I&#8217;ve been collecting, and am continuing to collect, samples every five minutes since the beginning of March. At least every five minutes that my computer isn&#8217;t <a href="http://bit.ly/LUSEY8">sleeping</a> or hanging.
</p>
<p>
I decided to collect the samples because I was getting downright frustrated with the performance of <a href="http://bit.ly/LUT7tx">Mozilla</a>&#8217;s <a href="http://bit.ly/HzqbTy">Firefox</a> browser. For reasons that are off-topic for this posting, I feel a strong interest in making sure that Firefox continues to be successful. 
</p>
<p>
For years I thought Firefox was the bomb. Starting about 9-12 months ago I started to notice that Firefox was routinely using all the resources on my computer. This concerned me because <a href="http://bit.ly/LUUGHN">Google</a>&#8217;s <a href="http://bit.ly/LUUHLP">Chrome</a> browser was starting to have enough functionality to be a primary browser.
</p>
<p>
Being that I wanted Firefox to stay competitive, I decided to try to stay with it. As Mozilla changed their release model, I started to use <a href="http://bit.ly/LUV1u1">Aurora</a> and <a href="http://bit.ly/LUV4Ga">Firefox Beta</a> and provide lots of feedback. The newer versions also seemed to consume a more reasonable amount of my computer&#8217;s resources. Being that the Firefox team was working hard at fixing performance problems, especially memory leaks, I stayed with Firefox. (See <a href="#sec-5">Reference: Articles About Firefox&#8217;s Memory Leaks And Repair Efforts</a> for information about FF&#8217;s memory leaks.)
<!-- more -->

Around the beginning of this calendar year I started to think that Firefox wasn&#8217;t getting faster and may have been getting slower. That said, I can be a pretty heavy user of my computer. Running FF with a couple of dozen add-ons is typical. Also, my experience with performance tuning has taught me that I don&#8217;t know enough to make accurate guesses. Guessing can be used to lead your performance tuning investigations, but you always need hard data.
</p>
<p>
After a bit of thought, I decided to collect some data and see if I can convince myself that Firefox is or is not the problem. There are, of course, simpler solutions to tracking a performance problem than sampling your entire process every five minutes for months. But this is a pet project. It wouldn&#8217;t be any fun if I just switched from Firefox to Chrome to see if I notice a difference.
</p>
<p>
Now that I have accumulated a few months of the data, I need to try to analyze the data and see what, if any, conclusions I can make from it. I have some ideas about where to start my data analysis and will just need to follow the path they outline. In short, I&#8217;m prepared to <a href="http://en.wikipedia.org/wiki/MacGyverism#MacGyverisms">MacGyver</a> the analysis as I go along.
</p>
<p>
My new pet project is the exploration of these data samples.
</p>
</div>

</div>

<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">The Programming Language</h2>
<div class="outline-text-2" id="text-2">

<p>Forensic performance analysis is never simple. For this project I anticipate that the difficulties will be in determining what types of data analyses are required. I&#8217;m hoping the actual coding will be relatively simple as there is no need for network interaction, provide real time responses, or even have a <a href="http://bit.ly/n1i2v2">GUI</a>. As long as I don&#8217;t need to do very complex statistical analyses, the choice programming language won&#8217;t likely matter to much.
</p>
<p>
So I have chosen to implement this project in <a href="http://bit.ly/LUK5N0">Ruby</a>. I&#8217;m certain I could implement it faster in any of a few dozen other programming languages but I chose Ruby for two reasons:
</p><ol>
<li>This is a personal project. One of my main goals is to have fun. Being that I don&#8217;t know Ruby, learning it will be more fun. Especially being that I haven&#8217;t learned a new language in a year or so.
</li>
<li>Ruby is a new-ish language, growing in popularity, likely to be around for awhile, so it seems like something I should learn or at least be familiar with.
</li>
</ol>


<p>
Ruby isn&#8217;t wholly unfamiliar to me. I&#8217;ve made a few small (very small) changes to the <a href="http://bit.ly/JBwXrU">org-ruby</a> <a href="http://bit.ly/M5PRvb">gem</a>. Based on that experience, I think that the syntax of Ruby is kind of strange but the functionality it provides seems comparable to other languages such as C and Java. I just have to learn the new syntax. Unlike C and Java, Ruby has <a href="http://bit.ly/M5T4ei">dynamic typing</a>. But languages that I&#8217;m fluent in, such as Lisp, Python, Bash, and AWK have dynamic typing. Doesn&#8217;t seem a problem.
</p>
<p>
But the structure of a Ruby application, at least the structure of the org-ruby gem, feels different to me than the structure of programs I&#8217;ve seen in other languages. Sure Ruby has classes and modules and functions and inheritance as many other languages do. But the design of the org-ruby gem feels a bit unusual to me. 
</p>
<p>
I think that part of the atypicality of the design of the org-ruby gem is that it is a parser that is written in a manner that is not familiar to me. I have a strong background in designing and implementing programming languages, their associated runtimes, IDE&#8217;s, and such. In my world, there are only a few ways to implement a <a href="http://bit.ly/JBxKsI">parser</a> and org-ruby doesn&#8217;t use any of them. 
</p>
<p>
That said, I don&#8217;t think the feeling of unfamiliarity stems from org-ruby&#8217;s parser not being a <a href="http://bit.ly/JBxTfU">recursive descent parser</a> or implemented with a <a href="http://bit.ly/JBxXMI">parser generator</a> from a <a href="http://bit.ly/JBxYAi">formal grammar</a>. I&#8217;ve seem plenty of really terrible parser implementations that left queasy but didn&#8217;t feel unfamiliar.
</p>
<p>
Not only do I not think that org-ruby gem is terrible, I think it has a certain elegance to its design. 
</p>
<p>
Having eliminated other possibilities, I&#8217;m left to think that the feeling of unfamiliarity must stem from Ruby itself.
</p>
<p>
For example, C and Pascal have a similar feel when you use them. So too do <a href="http://bit.ly/JByk9Q">object oriented</a> languages such as Java and C++. While not OO, C and Pascal are somewhat similar to Java and C++. But a Scheme application doesn&#8217;t feel anything like a C application (at least not if you understand how to program in Scheme). While I don&#8217;t have a word for it, I think that Ruby leads to a different way of writing applications than languages that I&#8217;m familiar with.. 
</p>
<p>
While I&#8217;m not sure what that difference is, I hope to figure it out as I move through this project. In the end, I don&#8217;t want to have a great &#8220;Java program&#8221; that happens to have been written using Ruby syntax. I want to have a great Ruby program &ndash; period.
</p>
</div>

</div>

<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">The Project&#8217;s Current Progress</h2>
<div class="outline-text-2" id="text-3">

<p>&#8220;Not much&#8221; seems to sum up my current project. While I&#8217;ve been collecting data for months and easing myself into Ruby by working on the org-ruby gem, I just started coding for this project a few hours ago. All I&#8217;ve done so far is write a tiny class to hold a line of data output by the <a href="http://bit.ly/M5V9H3">ps(1)</a> program:
</p>


<pre class="src src-ruby-mode"><span class="linenr"> 1:  </span>class PSDataLine
<span class="linenr"> 2:  </span>  attr_accessor :pid
<span class="linenr"> 3:  </span>  attr_accessor :stat
<span class="linenr"> 4:  </span>  attr_accessor :time
<span class="linenr"> 5:  </span>  attr_accessor :elapsed_time
<span class="linenr"> 6:  </span>  attr_accessor :virtual_size
<span class="linenr"> 7:  </span>  attr_accessor :rss
<span class="linenr"> 8:  </span>  attr_accessor :percent_cpu
<span class="linenr"> 9:  </span>  attr_accessor :percent_mem
<span class="linenr">10:  </span>  attr_accessor :command
<span class="linenr">11:  </span>
<span class="linenr">12:  </span>  # Create the object
<span class="linenr">13:  </span>  def initialize(line_string)
<span class="linenr">14:  </span>    line = line_string.split(' ')
<span class="linenr">15:  </span>    @pid = line[0]
<span class="linenr">16:  </span>    @stat = line[1]
<span class="linenr">17:  </span>    @time = line[2]
<span class="linenr">18:  </span>    @elapsed_time = line[3]
<span class="linenr">19:  </span>    @virtual_size = line[4]
<span class="linenr">20:  </span>    @rss = line[5]
<span class="linenr">21:  </span>    @percent_cpu = line[6]
<span class="linenr">22:  </span>    @percent_mem = line[7]
<span class="linenr">23:  </span>    @command = line[8]
<span class="linenr">24:  </span>  end
<span class="linenr">25:  </span>end
</pre>


<p>
I know it isn&#8217;t much but I still learned writing it. For example, when I was tinkering with the org-ruby gem, I just copied and pasted code, looked up some details in the Ruby library, etc&hellip; Being that I was modifying existing code, I never learned even the basic syntax. 
</p>
<p>
For example, in order to write my <code>PSDataLine</code> class, I needed to learn how Ruby uses syntax to determine if an identifier is a local variable, an instance variable, a global variable, or a constant. (My thanks to the <a href="http://bit.ly/JBzTER">Rubyist</a> for the good reference.)
</p>
<p>
I&#8217;m pretty busy this week so I don&#8217;t think I&#8217;ll make much progress on it. I was only able to get this work done by staying up till midnight on a Friday night and squeezing in time for a proofreading today.
</p>
</div>

</div>

<div id="outline-container-4" class="outline-2">
<h2 id="sec-4">Process Data</h2>
<div class="outline-text-2" id="text-4">

<p>While I&#8217;ve only begun writing my program and haven&#8217;t reached any conclusions about anything yet, I do have lots of data. If you have an interest in seeing what my computer&#8217;s been up to you can view the process data, read about my sampling mechanism, and copy the data from my <a href="http://bit.ly/M1nUBf">process-data</a> Github repository.
</p>
</div>

</div>

<div id="outline-container-5" class="outline-2">
<h2 id="sec-5">Reference: Articles About Firefox&#8217;s Memory Leaks And Repair Efforts</h2>
<div class="outline-text-2" id="text-5">


<ul>
<li>A <a href="http://bit.ly/LsNgcq">blog posting</a> posting by Mozillian Nicholas Nethercote. A <a href="http://bit.ly/LsNhNi">second posting</a> of Nicholas about weeks 49 &amp; 50 of the Mozilla effort to reduce the memory footprint.
</li>
<li>A different engineer&#8217;s <a href="http://bit.ly/LsNgZS">blog posting</a> discussing the hunt for memory leaks in Firefox.
</li>
<li>Another posting from Nicholas regarding the great [[http://bit.ly/LsNjF0][performance improvements in Firefox V7. - A September 26, 2011 <a href="http://bit.ly/LsNkJ8">article</a> in <a href="http://bit.ly/LsPLeE">CRN</a> discussing the lack of progress Mozilla has been making. Even if you ignore any opinions in the article, it has a lot of facts and links.
</li>
<li>A <a href="http://bit.ly/LsNkZB">Firefox Forum posting</a> expressing user frustration.
</li>
</ul>

</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Org-Mode + t Makes Tweeting Easy]]></title>
    <link href="http://www.neilsmithline.com/blog/2012/05/27/org-mode-plus-t-makes-tweeting-easy/"/>
    <updated>2012-05-27T18:23:00-04:00</updated>
    <id>http://www.neilsmithline.com/blog/2012/05/27/org-mode-plus-t-makes-tweeting-easy</id>
    <content type="html"><![CDATA[<div id="outline-container-1" class="outline-3">
<h3 id="sec-1">Update <span class="timestamp-wrapper"> <span class="timestamp">2012-06-04 Mon 00:57</span></span></h3>
<div class="outline-text-3" id="text-1">

<p>You can download the code from its <a href="http://cnet.co/M2O9L8">Github repository</a>.
</p>
</div>

</div>

<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">Motivation</h2>
<div class="outline-text-2" id="text-1">

<p>After yesterday&#8217;s <a href="http://www.neilsmithline.com/blog/2012/05/26/octopress-is-pretty-great" title="Posting about Octopress">ranting about Octopress</a>, it occurred to me that while I now own the content of my blog postings, I don&#8217;t own the content of my <a href="http://bit.ly/JvoqLE">tweets</a>. I&#8217;m sure that there&#8217;s some way to convince <a href="http://bit.ly/Jvotaj">Twitter</a> to give me my tweets, but why should I rely on them to store my tweets.
</p>
<p>
The obvious answer is that my tweets should be created on my computer and then sent to Twitter. 
</p>
<p>
It should be noted that I&#8217;m not interested in implementing a full Twitter client. There are more than enough of those. I&#8217;m interested in having my tweets, or at least the bulk of my tweets, in a simple and easily accessible format.
</p>
</div>

</div>

<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">The Answer Must Be Cheap</h2>
<div class="outline-text-2" id="text-2">

<p>While I want to author and store my tweets locally, it is not a high priority task for me. Whatever solution I come up with must add little or no overhead to my tweeting workflow, must be simple to implement, and cannot require ongoing tinkering to keep working.
</p>
<p>
Being that my relationship with <a href="http://bit.ly/zhYdcB">Org Mode</a> is rather simple: The more I learn about it the more of my life I want to be based on Org Mode. Org Mode just seems to make everything easier. So I decided to use Org Mode for the author, publication, and storage of my tweets. The system I&#8217;m describing has these properties:
</p><ul>
<li>It took me just a few hours to design, implement, test, and begin using it for tweeting.
</li>
<li>Besides not adding overhead to my tweeting, it has made tweeting dramatically simpler.
</li>
<li>The entire implementation is a single file of <a href="http://bit.ly/wTaGtn">elisp</a> that is 120 lines long. 50 of those lines are standard Emacs header comments that are automatically created. The implementation, along with its documentation, is only 70 lines long. While a small code base isn&#8217;t one of my goals, not needing ongoing tinkering is. It is hard to imagine that 70 lines of code will require too much tinkering.
</li>
</ul>


<!-- more -->

</div>

</div>

<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">Advantages Of Org Mode</h2>
<div class="outline-text-2" id="text-3">

<p>Before continuing, you should know a few facts about Org Mode:
</p><ul>
<li>At its core, Org Mode is an <a href="http://bit.ly/MSMf12">outliner</a> on steroids. This works great for me as I tend to organize my thoughts as trees. I&#8217;m obvious not alone as the <a href="http://bit.ly/MSMf12">outliner</a> page on <a href="http://bit.ly/KWo5OA">Wikipedia</a> has a list of many outliner applications along with <a href="http://bit.ly/KWoa4F">references</a> to many outliners that are designed to implement specific functionality. 
</li>
<li>Org Mode augments its outlining functionality with a <a href="http://bit.ly/MSKKjm">task management system</a> (<a href="http://bit.ly/MSKKjm">details</a>).
</li>
<li>Org Mode has a <a href="http://bit.ly/MSNhKm">template</a> based <a href="http://bit.ly/MSN7CO">data capturing</a> system that allows for the easy capturing of data into a consistent format.
</li>
<li>Org Mode is implemented in <a href="http://bit.ly/MSNvkN">GNU Emacs</a>. Besides the fact that I spend nearly all of my non-browser computer time in Emacs, Emacs has a <a href="http://bit.ly/MSNVrv">rich extension mechanism</a>
</li>
</ul>


</div>

</div>

<div id="outline-container-4" class="outline-2">
<h2 id="sec-4">The Storage Structure Of Tweets</h2>
<div class="outline-text-2" id="text-4">

<p>Each tweet would be an outline entry whose title would be a small description of the tweet plus some other information to be discussed later. The body for each outline entry would be the tweet. In Org Mode this would look like:
</p><pre class="example">
* My First Tweet
  This is my first tweet using Org Mode.
</pre>


<p>
While this works fine for one tweet, after 50 or 100 tweets, things are going to get pretty messy. But, as Org Mode is an outliner, it supports the nesting of outline entries via both direct data entry as well as through Org Mode&#8217;s capturing mechanism. You just need to provide Org Mode with a string that describes the data you want to capture and the outline format for that data.
</p>
<p>
While, for the moment, sparing you the ugliness of the capture configuration string, I&#8217;ll tell you that Org Mode supports a date tree outline format.
</p><pre class="example">
* 2012
*** 2012-05 May
***** 2012-05-26 Saturday
******* My First Tweet
        This is my first tweet using Org Mode!
***** 2012-05-27 Sunday
******* My Second Tweet
        This is now my 2nd tweet using Org Mode!
</pre>


<p>
Being an outliner, Org Mode supports the <a href="http://bit.ly/KWoekU">folding</a> of the outline. That is, you can collapse the outline to hide parts of it that you are not immediately interested in. For example, let&#8217;s say that, being today is Monday, I don&#8217;t want to be bothered looking at my tweets from Saturday Or Sunday. No problem. When you fold the outline headings for Saturday and Sunday, the list of tweets will look like this:
</p><pre class="example">
* 2012
*** 2012-05 May
***** 2012-05-26 Saturday ...
***** 2012-05-27 Sunday ...
</pre>


<p>
The &#8220;&hellip;&#8221; is Org Mode&#8217;s way to let you know that this entry has been folded.
</p>
<p>
Keep in mind that I get all of this storage mechanism from Org Mode for free. All I needed to do was create a single configuration string for it.
</p>
</div>

</div>

<div id="outline-container-5" class="outline-2">
<h2 id="sec-5">Capturing Tweets</h2>
<div class="outline-text-2" id="text-5">

<p>A simple yet highly functional storage mechanism is fine but what I&#8217;m looking for is to reduce my tweeting overhead. This means that the workflow is what I care about. 
</p>
<p>
The first part of the workflow is the &#8220;capturing&#8221; of my tweets. Org Mode&#8217;s capturing mechanism is rather rich. It allows me to capture data (ie: to tweet) from Emacs with a couple of keystrokes. It also allows me to capture data, including an URL and highlighted text from my browser by clicking on a bookmarklet.
</p>
<p>
When I initiate a tweet capture, I&#8217;m initially prompted for a &#8220;title&#8221;. That is the descriptive text for the tweet. In the above example, &#8220;My First Tweet&#8221; is a title. After entering my title, I&#8217;m given an <a href="http://bit.ly/KWpdBF">Emacs buffer</a>, basically a new Emacs window, in which to type my tweet.
</p>
<p>
When I&#8217;m done typing my tweet, a couple of keystrokes tells Org Mode that it should add the tweet to my tweet file and save the file. 
</p>
</div>

</div>

<div id="outline-container-6" class="outline-2">
<h2 id="sec-6">Tweeting</h2>
<div class="outline-text-2" id="text-6">

<p>Now that I&#8217;ve captured my tweet, I need to actually tweet it. This is where some of the wonders of Emacs come into play. Emacs has lots of <a href="http://bit.ly/KWpRPv">hooks</a> that allow you to insert code into the workflow. Org Mode adds many hooks of its own.
</p>
<p>
Without boring you with the exact details, by using the appropriate hooks I have set up Emacs to take special actions whenever a file is saved that ends in &#8220;-update.org&#8221;. I used the file naming convention of &#8220;-update&#8221; instead of &#8220;-tweet&#8221; in case I decide to add other types of status messages at a later date.
</p>
<p>
Being as I was going for simple, I decided that Emacs would not talk directly to Twitter. Instead, I have Emacs use the wonderfully intuitive, functional, and efficient <a href="http://bit.ly/KGlf2s">t application</a>. For my purposes, <code>t</code>&#8217;s <a href="http://bit.ly/xOIkfJ">CLI</a> is perfect. Once you&#8217;ve signed into Twitter with <code>t</code>, it will tweet for you with the simple command line of:
</p><pre class="example">
t update This is my tweet text.
</pre>


<p>
That seems about as simple as it can get.
</p>
</div>

</div>

<div id="outline-container-7" class="outline-2">
<h2 id="sec-7">Tracking Tweet Status</h2>
<div class="outline-text-2" id="text-7">

<p>Being that I&#8217;m storing more than one tweet in a file, it is important that I know which tweets have been tweeted and which ones haven&#8217;t. This is another place where I get to leverage the wonders of Org Mode.
</p>
<p>
Beyond outlining, Org Mode supports a simple yet highly functional and customizable <a href="http://bit.ly/KWrJrE">task management system</a>. The customizability allows you to define task states well beyond the typical &#8220;open&#8221; and &#8220;closed&#8221; states of many other task managers. 
</p>
<p>
I used the task management to teach Org Mode about status update tasks. A status update task can be in one of two states: <code>POST</code> and <code>DONE</code>. When it is in the <code>POST</code> state, it needs to be posted. The <code>DONE</code> state means it has already been posted. Org Mode&#8217;s slogan is 
</p><pre class="example">
Org: Your Life in Plain Text
</pre>

<p>and they mean it.
</p>
<p>
To indicate a tweet&#8217;s, ie: a task&#8217;s, state, you simply add the state to the outline header line. For example, using the example from above, if I had already posted my first tweet but not my second, the outline would look like this:
</p><pre class="example">
* 2012
*** 2012-05 May
***** 2012-05-26 Saturday
******* =DONE= My First Tweet
        This is my first tweet using Org Mode!
***** 2012-05-27 Sunday
******* =POST= My Second Tweet
        This is now my 2nd tweet using Org Mode!
</pre>


<p>
When I use Org Mode&#8217;s capturing mechanism to add my new tweet to the file, it automatically adds the state of <code>POST</code> to each new tweet. As mentioned above, when the tweet file is saved it executes my code. While I have 70 lines of code, only two functions consisting of a total of 45 lines is needed to post my tweets. The remaining 35 lines are configuration that, via Emacs and Org Mode&#8217;s hooks, makes sure that my code is called whenever the tweet file is saved. 
</p>
<p>
The first function, all 9 lines of it, simply asks Org Mode to loop through all tweets (ie: outline headings) in the <code>POST</code> state and call my second function on each of those tweets. The second function calls the CLI t to execute the tweet. This 28 line function that actually does the tweeting is really rather simple. Only 10 lines of it are related to actually tweeting. The remainder of the function is error handling in case, for some reason, my tweet fails.
</p>
<p>
After successfully tweeting a status update, I tell Org Mode to change the tweet&#8217;s state from <code>POST</code> to <code>DONE</code>. That&#8217;s all there is to it.
</p>
</div>

</div>

<div id="outline-container-8" class="outline-2">
<h2 id="sec-8">Some Nice Freebies</h2>
<div class="outline-text-2" id="text-8">

<p>Besides the data capturing, the ease of calling an external program, the automatic outline maintenance, the automatic state tracking (ie: <code>POST</code> and <code>DONE</code>), and the automatic execution of my tweeting code whenever the tweet file is saved, the Emacs and Org Mode&#8217;s richness provide other nice features:
</p><ul>
<li>Twitter&#8217;s 140 character limit per tweet is easily eyeballed while you are typing in Emacs as the editor tells you how long a line is. I have, of course, implemented a character count error check before tweeting, but it is nice to catch the problem when you are typing. 
</li>
<li>Automated highlighting of tweets.
</li>
<li>A common problem with the 140 character limit on tweets is that URLs can be very long. Emacs helps here with its <a href="http://bit.ly/wSSiWH">Bitly library</a> (courtesy of me :-). This shortens URLs in Emacs, using Bitly, with two keystrokes. (Bitly happens to be my current URL shortener of choice.)
</li>
<li>Org Mode has the ability to automatically record a variety of times associated with each task. I have set up Org Mode to record the time the tweet was entered by me as well as the time that it actually got tweeted.
</li>
<li>Org Mode allows you to <a href="http://bit.ly/KWtipB">tag</a> (aka: &#8220;label&#8221; or &#8220;categorize&#8221;) each outline item. I have leveraged this in anticipation of extending the tweeting system to include status updates to other services than Twitter. Also, in the future I may want to be able to manage multiple Twitter accounts. I&#8217;m not sure that I&#8217;ll ever implement that functionality, but thought I&#8217;d throw it in as preparing for it is essentially free. I currently label each status update with two labels. The first label describes the type of status update. In this case it is &#8220;TWEET&#8221; to designate that I want to update Twitter. The second label is &#8220;NS&#8221; to indicate that I want to update the status of my <a href="http://bit.ly/KWtyVp">@neil_smithline</a> Twitter account.
</li>
<li>Emacs is my tweet editor. For those of you who don&#8217;t know Emacs as well as those of you that know Emacs and hate it, I&#8217;m sure you wouldn&#8217;t want to edit tweets in Emacs. But I have been using Emacs for 25+ years and still think it is pretty slick. Besides the functionality discussed above, Emacs gives me <a href="http://bit.ly/KWtPb0">spell checking/correction</a>, the ability to easily change the case of something I&#8217;ve mistyped, functionality based on English grammar (eg: the ability to move, delete, or even transpose words or sentences), etc&hellip;
</li>
</ul>


</div>

</div>

<div id="outline-container-9" class="outline-2">
<h2 id="sec-9">A Sneak Peek</h2>
<div class="outline-text-2" id="text-9">

<p>After all my blathering, I thought that a screenshot of my tweets would be nice. This screenshot shows tweets for the past three days. I have folded the tweets from Saturday so that they are easy to ignore. For the sake of this picture, I have unfolded my tweets from Sunday so that it shows what a posted tweet looks like. Finally, I have a tweet for today that is queued up to announce this blog posting. 
</p>
<p>
As you look at this screenshot, remember that almost all of this is automatically generated. For example, for the final tweet I had to enter the title &#8220;Tweeting From Emacs&#8221; (this can actually be blank but I think the title makes it more useful) and the actual tweet. Everything else, including the Bitly URL shortening, comes for free.
</p>
<p>
<img src="http://www.neilsmithline.com/assets/screen-snapshots/tweets-screenshot.png"  alt="http://www.neilsmithline.com/assets/screen-snapshots/tweets-screenshot.png" />
<span style="color:#F8F8F8;">For Technorati: PHTDYXEZKM3Q</span>
</p></div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Is Pretty Great]]></title>
    <link href="http://www.neilsmithline.com/blog/2012/05/26/octopress-is-pretty-great/"/>
    <updated>2012-05-26T13:32:00-04:00</updated>
    <id>http://www.neilsmithline.com/blog/2012/05/26/octopress-is-pretty-great</id>
    <content type="html"><![CDATA[<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">Jekyll Overview</h2>
<div class="outline-text-2" id="text-1">

<p>I have simply fallen in love with <a href="http://bit.ly/KT1aFT">Octopress</a>. I think I mentioned previously that Octopress is an auto-configuration tool wrapped around <a href="http://bit.ly/Jm1bmc">Jekyll</a>. And Jekyll is the technology behind <a href="http://bit.ly/Krch8n">Github pages</a>. As such, if you use Jekyll for your blogging platform, you can preview your blog locally, push it to Github, and let Github do all the page serving. 
</p>
<p>
This isn&#8217;t actually as much work for the Github servers as you may think. Jekyll is a <a href="http://bit.ly/KrdOeu">static</a> <a href="http://bit.ly/KrdUmf">blogging system</a> with no <a href="http://bit.ly/KrdX1s">CMS support</a>. A static blog needs to be <a href="http://bit.ly/Kre8tB">compiled</a> whenever content is modified, but once compiled, the only thing the server needs to do is serve the pages. Dynamic blogging systems such as <a href="http://bit.ly/KreoZJ">Wordpress</a> and <a href="http://bit.ly/KreuAH">Joomla</a> are programs that run on the server and work interactively with the web server to produce each page.
</p>
</div>

</div>

<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">Configuration</h2>
<div class="outline-text-2" id="text-2">

<p>Octopress&#8217;s biggest addition to Jekyll is that it automagically configures Jekyll for you. I have found that configuring Jekyll is a bit of a pain. Jekyll decided to trade easy configuration for flexibility. This is a common decision in applications and one I can&#8217;t really argue with.
<!-- more -->

But Octopress packages a mostly configured Jekyll installation in a neat little package. The introductory paragraph on <a href="http://bit.ly/KT1aFT">Octopress.org</a> states:
</p><blockquote>

<p>Octopress is a framework designed by Brandon Mathis for Jekyll, the blog aware static site generator powering Github Pages. To start blogging with Jekyll, you have to write your own HTML templates, CSS, Javascripts and set up your configuration. But with Octopress All of that is already taken care of. Simply clone or fork Octopress, install dependencies and the theme, and you&#8217;re set.
</p>
</blockquote>


<p>
While that may sound a bit intimidating to the less-computer literate, the Octopress site carefully steps you through the process. I&#8217;ve installed and used Wordpress, Joomla, <a href="http://bit.ly/KrgcC1">Drupal</a>, <a href="http://bit.ly/wq2Ien">Nanoblogger</a>, and many other blogging systems. I can say that Octopress is, by far, the easiest. 
</p>
<p>
The above quote states three steps for installing Octopress but there are actually a few more steps:
</p><ol>
<li>Install Git
</li>
<li>Clone or fork Octopress
</li>
<li>Install dependencies
</li>
<li>Install theme
</li>
<li>Configure your blog
</li>
<li>Configure deployment
</li>
</ol>



</div>

<div id="outline-container-2-1" class="outline-3">
<h3 id="sec-2-1">Git</h3>
<div class="outline-text-3" id="text-2-1">

<p>If you don&#8217;t have <a href="http://bit.ly/KrgU2a">Git</a> installed, you need to install it. This was a trivial task for most users but, thanks to the clever folk at Github, has become idiot-proof. Github created a <a href="http://bit.ly/KrhqgF">Mac OS X</a> and <a href="http://windows.github.com/">Windows</a> application that allows easy use of Github. These make installing and using Git user-friendly for those who prefer to avoid <a href="http://bit.ly/xOIkfJ">CLI</a>s.
</p>
</div>

</div>

<div id="outline-container-2-2" class="outline-3">
<h3 id="sec-2-2">Clone Or Fork Octopress</h3>
<div class="outline-text-3" id="text-2-2">

<p>Cloning Octopress, simpler than forking it, is a single command line 
</p><pre class="example">
git clone git://github.com/imathis/octopress.git octopress
</pre>

<p>It takes only a few mouse clicks if you are using one of Github&#8217;s applications to do the clone. 
</p>
</div>

</div>

<div id="outline-container-2-3" class="outline-3">
<h3 id="sec-2-3">Install Dependencies</h3>
<div class="outline-text-3" id="text-2-3">

<p>Installing the dependencies is, yet again, a few simple CLI commands described in an easy-to-read style on Octopress&#8217;s <a href="http://bit.ly/LExpsY">setup</a> page.
</p>
</div>

</div>

<div id="outline-container-2-4" class="outline-3">
<h3 id="sec-2-4">Install The Theme</h3>
<div class="outline-text-3" id="text-2-4">

<p>Installing the theme is a single CLI command:
</p><pre class="example">
rake install
</pre>

<p>There are additional theme installation options but you can simply ignore them as the defaults work well. In a subsequent blog post I&#8217;ll discuss how I have made a minor alteration to the Octopress installation that allows me to entirely change my theme as often as I like without losing any data. Simple theme changes (eg: page colors) are easy to make at anytime. 
</p>
</div>

</div>

<div id="outline-container-2-5" class="outline-3">
<h3 id="sec-2-5">Configure Your Blog</h3>
<div class="outline-text-3" id="text-2-5">

<p>Configuring your blog is perhaps the most complicated step in the entire installation process. You&#8217;ll need to open a text editor such as <a href="http://bit.ly/LEyD7l">Textedit</a> on a Mac or <a href="http://bit.ly/LEyRvo">Notepad</a> on Windows. 
</p>
<p>
The configuration file is written in a format called <a href="http://bit.ly/LEzjd3">YAML</a>. That sounds a lot scarier than it actually is. Octopress&#8217;s <a href="http://bit.ly/Mlynfm">configuration page</a> states that you just need to edit the existing <code>_config.yml</code>, and modify the following lines:
</p><pre class="example">
url:                # For rewriting urls for RSS, etc
title:              # Used in the header and title tags
subtitle:           # A description used in the header
author:             # Your name, for RSS, Copyright, Metadata
simple_search:      # Search engine for simple site search
description:        # A default meta description for your site
subscribe_rss:      # Url for your blog's feed, defauts to /atom.xml
subscribe_email:    # Url to subscribe by email (service required)
email:              # Email address for the RSS feed if you want it.
</pre>


<p>
Several of the configuration options have default values or can be left empty.
</p>
<p>
This configuration step in Octopress differs from other blogging systems only in that you have to use Textedit or Notepad to enter the data. Many other systems allow you to enter the data into a <a href="http://bit.ly/n1i2v2">GUI</a> or a web page. 
</p>
</div>

</div>

<div id="outline-container-2-6" class="outline-3">
<h3 id="sec-2-6">Configuring Deployment</h3>
<div class="outline-text-3" id="text-2-6">

<p>Configuring your deployment, the final setup action, involves telling Octopress what computer is going to <a href="http://bit.ly/LECz8n">host</a> your blog. While you can run your blog right on your desktop or laptop, it will only be visible by other people in your home or office. This is helpful if you want to preview your blog before &#8220;publishing&#8221; it so the rest of the world can see it but when you want to publish your blog you will need to have access to a hosting computer (AKA: a server) that is on the internet <a href="http://bit.ly/LEIgTI">24x7</a>.
</p>
<p>
Getting access to a server can be less than straightforward and almost always costs money. But this is rather simple with Octopress because:
</p><ul>
<li>Octopress is a static blog. This is compared to a dynamic blog that requires programs to interact with the server. Once Octopress has done its job, you just need to put the blog into the right location on your server and everything will magically work.
</li>
<li>Octopress, the blogging system that tries to make configuration easy, has carefully documented, in easy-to-read text, three different ways to <a href="http://bit.ly/LEGcuN">host your blog</a> on a server. Two of them are absolutely free: Github itself (the one I use) and <a href="http://bit.ly/LEGIsK">Heroku</a>. The third strategy using <a href="http://bit.ly/LEIdHt">rsync</a> is a bit more complex and typically costs some money to use. That being said, the documentation guides you to a hosting company that charges only $5 a month for server access. Unless you <b>know</b> that you need a server for something besides hosting a blog, I strongly recommend going with one of the other options. 
</li>
</ul>


<p>
As I said, I am using Github to host my blog. It takes exactly one line to configure your blog to use Github. I haven&#8217;t used the other deployment mechanisms but Heroku seems to be of equal complexity while rsync definitely requires more work and a greater knowledge of computers.
</p>
</div>

</div>

<div id="outline-container-2-7" class="outline-3">
<h3 id="sec-2-7">Configuration Summary</h3>
<div class="outline-text-3" id="text-2-7">

<p>While there is a lot of descriptive text above, the entire configuration process took me a couple of hours the first time and about 20 minutes the second time. Unless you are like me and enjoy trying stupid things, you&#8217;ll only need to install it once :-) I would imagine that a non-technical users could easily install Octopress in half a day.
</p>
<p>
The only exception that I can think of would be if you&#8217;re on a Windows computer and have lots of difficulties installing the dependencies. Mac OSX and Linux come with most of the dependencies pre-installed. I don&#8217;t think that Windows does.
</p>
</div>
</div>

</div>

<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">It&#8217;s Blogging Time!</h2>
<div class="outline-text-2" id="text-3">

<p>Before you can actually start to blog, you need to choose an editor and a markup language. While you can change these at anytime, you need one of each to blog. I&#8217;ll discuss this in a subsequent blog posting where I discuss my personal Octopress configuration.
</p>
<p>
Now that everything is configured, it&#8217;s time to blog. While this involves using the command line, it is a trivial usage. When you want to create a new post you execute the command:
</p><pre class="example">
rake 'new_post[Name Of My Post]'
</pre>

<p>The reason why that is the magical incantation to create a new post is unimportant. All you need to do is remember (or be able to lookup) that command.
</p>
<p>
When the <code>rake</code> command finishes, it will tell you the name of the file for your new posting. Just open the file and start typing. If you want to see a preview of your blog before publishing it to the server, run the command
</p><pre class="example">
rake preview
</pre>


<p>
Then you can open your web browser to <a href="http://localhost:4000">http://localhost:4000</a> to see your blog. I strongly recommend that you copy-and-paste that URL and then bookmark it. 
</p>
<p>
Once you are ready to publish your blog to the world, execute the command
</p><pre class="example">
rake gen_deploy
</pre>

<p>And <i>voila</i>! You have updated your blog.
</p>
</div>

</div>

<div id="outline-container-4" class="outline-2">
<h2 id="sec-4">Octopress Summary</h2>
<div class="outline-text-2" id="text-4">


</div>

<div id="outline-container-4-1" class="outline-3">
<h3 id="sec-4-1">Cons</h3>
<div class="outline-text-3" id="text-4-1">


</div>

<div id="outline-container-4-1-1" class="outline-4">
<h4 id="sec-4-1-1">Configuration</h4>
<div class="outline-text-4" id="text-4-1-1">

<p>Configuring Octopress is definitely more complex than configuring a blog on Blogger.com or a similar service. If you are looking for the easiest solution, no-frills solution, go with one of those.
</p>
</div>

</div>

<div id="outline-container-4-1-2" class="outline-4">
<h4 id="sec-4-1-2">Single Computer Publishing</h4>
<div class="outline-text-4" id="text-4-1-2">

<p>While I haven&#8217;t seen it explicitly stated in any documentation for Octopress or Jekyll, they really are intended to publish new posts from a single computer. You can author the posts on any computer or network service. The first option that jumps into my head is <a href="http://bit.ly/KTgaWb">Google Docs</a>. But to publish (ie: to deploy) your site from more than one computer will definitely require extra configuration, computer skills, and tinkering. If you absolutely must <i>publish</i> from multiple computers, the online blogging systems may be a better choice.
</p>
</div>
</div>

</div>

<div id="outline-container-4-2" class="outline-3">
<h3 id="sec-4-2">Pros</h3>
<div class="outline-text-3" id="text-4-2">


</div>

<div id="outline-container-4-2-1" class="outline-4">
<h4 id="sec-4-2-1">Configuration</h4>
<div class="outline-text-4" id="text-4-2-1">

<p>While configuring a blog on a site like Blogger is definitely easier than configuring Octopress, if Blogger doesn&#8217;t meet your needs, I think Octopress is easier to manage than all Joomla, Drupal, and all of its competitors &ndash; at least the ones I&#8217;ve seen.
</p>
</div>

</div>

<div id="outline-container-4-2-2" class="outline-4">
<h4 id="sec-4-2-2">Content Possession</h4>
<div class="outline-text-4" id="text-4-2-2">

<p>When you use a site like Blogger.com, the content you have posted is in the possession of Blogger. They determine how they will store your content, how they will let you export it, modify it, delete it, etc&hellip; But with Octopress, you are always in possession of your content. In order to have your blog visible on the web, you must deploy it to a server, but that is just a copy of your content. You are always in possession of the original content.
</p>
</div>

</div>

<div id="outline-container-4-2-3" class="outline-4">
<h4 id="sec-4-2-3">Content Accessibility</h4>
<div class="outline-text-4" id="text-4-2-3">

<p>Whether you are using an online blogging service such as Blogger.com or hosting your own blogging application such as Joomla or Drupal, your postings are typically not stored in a convenient manner. Even if the blogging system lets you get access to all of your content, the content is frequently meaningless or difficult to use.
</p>
<p>
But with Octopress, the content for each posting is in a file. One file for each posting. While I&#8217;ve not discussed choosing an editor or a markup language in this posting, it is your choice of editor and markup language that determine what you can do with your content.
</p>
<p>
For example, I was blogging with Nanoblogger for a few months. As it required continual tinkering, I moved to Octopress. Like Octopress, Nanoblogger lets you choose your editor and markup language. Because both blogging systems give you accessibility to your content, I was able to convert about 20 Nanoblogger postings into Octopress postings in about 20 minutes. I imagine it would have taken less computer-savvy users as long as 2-3 minutes a posting. 
</p>
<p>
The one-file-one-posting principal of Octopress, and Nanoblogger, make life so much simpler.
</p>
</div>

</div>

<div id="outline-container-4-2-4" class="outline-4">
<h4 id="sec-4-2-4">And It Looks Good Too!</h4>
<div class="outline-text-4" id="text-4-2-4">

<p>Even after customizing them, I find that Wordpress blogs tend to be drap and all look like <a href="http://bit.ly/KThoAU">this</a> and that Blogger.com blogs require lots of tinkering but still tend to look like <a href="http://bit.ly/KThtVf">this</a>. On the other hand, Octopress blogs tend to look like the <a href="http://bit.ly/KT1aFT">Octopress homepage</a> or my <a href="http://bit.ly/yGGszW">blog</a>.
</p>
<p>
IMO, Octopress looks great out of the box. I am partial to using dark themes where black, white, and shades of gray are the main colors. It took me about 10 minutes to change the default <a href="http://bit.ly/KT1aFT">colors for Octopress</a> to use my preferred <a href="http://bit.ly/yGGszW">color pallette</a>.
</p>
</div>

</div>

<div id="outline-container-4-2-5" class="outline-4">
<h4 id="sec-4-2-5">It Will Grow With You</h4>
<div class="outline-text-4" id="text-4-2-5">

<p>I think that Octopress&#8217;s greatest features are the above mentioned ease-of-configuration and the fact that, while it is hidden from you, it is built on a very strong blogging engine, Jekyll. So, if you wake up one day and say &#8220;Gee. I wish my blog could do XYZ.&#8221;, the odds are that it can. Just google &#8220;Jekyll blogs XYZ&#8221; and, at least for reasonable XYZs, you&#8217;ll find that instructions about reconfiguring your blog so it can do XYZ.
</p>
<p>
There are also many discussion groups, forums, and helpful Jekyll users in the blogosphere that can offer suggestions, provide pointers, or even make a small modification to Octopress/Jekyll so that XYZ is easy to do.
</p>
</div>
</div>
</div>

</div>

<div id="outline-container-5" class="outline-2">
<h2 id="sec-5">Future Postings About Octopress</h2>
<div class="outline-text-2" id="text-5">

<p>This is now my second posting about Octopress. My } discussed my initial opinions about Octopress. They were largely positive but so too were my } of Nanoblogger. 
</p>
<p>
At the time of writing this blog posting I&#8217;m certain that I&#8217;m going to love Octopress. (Though, if I change my mind, I am in possession of my own content so it is easy to switch to another platform.)
</p>
<p>
My next posting about Octopress will explain the minor modifications I have made to Octopress. I made these modifications to accomplish two goals:
</p><ol>
<li>Allow me to easily use <a href="http://bit.ly/zhYdcB">Org Mode</a> as my markup language and <a href="http://emacswiki.org">Emacs</a> as my editor. While I simply love this setup, I imagine that it will only be of interest to preexisting Emacs users.
</li>
<li>Keep my content totally separate from the Octopress&#8217;s content. By this I mean that if, you were to burn my computer as I&#8217;m typing these very words, I could have Octopress up and running on a new computer with all of my content, including postings, images, etc.., in about 20 minutes. IMO, this an improvement on Octopress&#8217;s configuration and should probably be changed in Octopress.
</li>
</ol>

</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YANBT: Yet Another New Blogging Technology]]></title>
    <link href="http://www.neilsmithline.com/blog/2012/05/14/new-blog-tech/"/>
    <updated>2012-05-14T12:36:00-04:00</updated>
    <id>http://www.neilsmithline.com/blog/2012/05/14/new-blog-tech</id>
    <content type="html"><![CDATA[<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">NanoBlogger Was Killing Me</h2>
<div class="outline-text-2" id="text-1">

<p><a href="http://bit.ly/wq2Ien">NanoBlogger</a> really looked cool to me 
(<a href="http://www.neilsmithline.com/blog/categories/blogging-tech">my postings about why I liked it</a>):
</p><ul>
<li>Small
</li>
<li>Most functionality provided via plugins
</li>
<li><a href="http://bit.ly/xOIkfJ">CLI</a> only
</li>
<li>It is <a href="http://bit.ly/Mlkg9X">FOSS</a>.
</li>
<li>Produced a static site (ie: only serves static pages)
</li>
<li>It was built on <a href="http://bit.ly/JbQmzE">Bash</a> &ndash; I thought this was the coolest
</li>
</ul>


<p>
I liked it so much that I wrote a CLI for it that was better suited to my personal workflow. I also spent some time integrating it with Emacs. But it had endless problems.
</p>
<p>
It was slow, it did not do anything automatically, frequently required rebuilding of the entire blog, was hard to view on my local machine, isn&#8217;t really being maintained, doesn&#8217;t have a real templating system, breaks the RSS feed on special characters such as etc&hellip;
</p>
</div>

</div>

<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">Where Next</h2>
<div class="outline-text-2" id="text-2">

<p>Over the past few weeks I&#8217;ve been looking around for a new blogging system. The only real contender seemed to be <a href="http://bit.ly/Jm1bmc">Jekyll</a>. It is written in <a href="http://bit.ly/KAfYv0">Ruby</a> and used by Github to power Github Pages. It has so many contributors to it that its <a href="http://bit.ly/JetyoE">Github repository</a> has, at the moment, 50+ pull requests.
</p>
<p>
I had nearly chosen Jekyll when I moved to NanoBlogger. I found that the discussion about moving to Jekyll on the <a href="http://bit.ly/JH7cIy">0xdecafbad.com</a> blog really aligned with my thoughts.
</p>
<p>
But, after playing with it a bit, I found that Jekyll was difficult to configure. And I just so liked the Bash thing that NanoBlogger had that I decided to go with NanoBlogger. But now I&#8217;m wasting too much of my time fighting with Nanoblogger and I should reconsider Jekyll.
<!-- more -->

This time, when I was researching Jekyll, I found <a href="http://bit.ly/KT1aFT">Octopress</a>. Octopress is Jekyll on steroids. It provides an automated configuration and maintenance system that takes the pain out of using Jekyll.
</p>
<p>
So now I&#8217;m giving Octopress/Jekyll a try. I&#8217;ll see how it goes. Configuring a site with a <i>hello world</i> blog entry only took a couple of hours. Most of that was just downloading Octopress and reading the docs to figure out what to do. It turned out that configuration was running three <a href="http://bit.ly/KT2jxn">rake</a> commands. 
</p>
</div>

</div>

<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">Converting From Nanoblogger To Jekyll</h2>
<div class="outline-text-2" id="text-3">

<p>Because NanoBlogger blog entries are plain text with markup, converting my entire old blog to Octopress was fairly easy as Octopress also uses plain text with markup for blog entries. I ran into two snags. The first one was in Emacs&#8217; <a href="http://bit.ly/zhYdcB">Org Mode</a>, my authoring tool. It broke when you had a &#8220;+&#8221; in the path name of your input files (in my case, in the path of my blog). It took me several hours to find the bug. Once I found it, it was easy to patch and I sent my fix to be included in subsequent Org Mode releases.
</p>
<p>
The second problem was a bit trickier. Octopress was breaking on some of my blog&#8217;s generated HTML files. The error message gave me the line number and the character number in that line that was causing the error but it omitted to give me the file name. I believe the technical term for that is &#8220;Oops!&#8221;.
</p>
<p>
To find the file that was casing the problem I started to remove blog files using a <a href="http://bit.ly/KT3gpo">binary search</a>-ish style to track the problem file down. This proved more difficult than I thought it should. After much frustration, it occurred to me that the problem was in many blog entries so the binary search wasn&#8217;t so helpful. So I wiped my blog and started adding one posting at a time. 
</p>
<p>
Even after I found the first posting that caused Octopress, actually Jekyll, to crash, I couldn&#8217;t figure out what was wrong with the file. The error message said something about non-ASCII characters but I only had ASCII, or so I thought. It turned out that I had copied and pasted some text from my browser and it had inserted a hyphen (-) that was not the ASCII hyphen. To me, they looked identical. 
</p>
<p>
Despite knowing what the problem was, I couldn&#8217;t automate Emacs or grep to find the offensive hyphens. In Emacs, the search treated ASCII and non-ASCII hyphens the same. I forget the problems I had with grep but I couldn&#8217;t get it to work either. This meant I was going to have to add one entry at a time to my blog to track down the other problems. Thank you &ndash; NOT!
</p>
<p>
But Jekyll is written in Ruby and Ruby is a scripting language so I have the source code for Jekyll. Being that the error message included a full stack trace, I figured I could update the error message. In the end I just ended up making Jekyll a bit more verbose: it announces which file it is about to process with the message:
:Processing file <i>myfile</i>.
</p>
<p>
Then I added all my blog entries, ran Jekyll, got the same error message with only the line and character position, but now had the name of the file it was processing when it had a problem.
</p>
</div>

</div>

<div id="outline-container-4" class="outline-2">
<h2 id="sec-4">Plain Text Blogs Rock!</h2>
<div class="outline-text-2" id="text-4">

<p> After correcting a couple of entries I noticed that the problem only occurred on hyphens (-) and single quotes (&#8216;). Being that both NanoBlogger and Octopress/Jekyll use plain text files for their input, I had a whole bunch of tools to help me fix the problem. 
</p>
<p>
 In the end I ended up turning Emacs failure to distinguish between the ASCII and non-ASCII versions of these characters to my advantage. I did a search-and-replace on all my blog entries replacing hyphens with hyphens and single quotes with single quotes. While Emacs&#8217; search found both ASCII and non-ASCII characters, it always replaced them with what I typed as the replacement, ASCII.
</p>
<p>
Then, <i>voila</i>, there was my blog. And my blog looked way better in Octopress than NanoBlogger. Check out a NanoBlogger <a href="http://bit.ly/wq2Ien">sample blog</a> and an Octopress <a href="http://bit.ly/KT1aFT">sample blog</a>. Huge difference. Also, excluding the weak error message from Jekyll (I&#8217;ll file a bug report on that and I suspect someone will fixed it as Jekyll is so heavily used), I didn&#8217;t need to do a thing to build and publish the blog. Octopress even pushes the blog to Github automatically. I had written a script to do this automatically for NanoBlogger, but I&#8217;d much rather use someone else&#8217;s perfectly good solution rather than writing my own.
</p>
<p>
I think I&#8217;m going to be very happy with Octopress.
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SparkleShare Doesn't Sparkle]]></title>
    <link href="http://www.neilsmithline.com/blog/2012/05/09/sparkleshare-bomb/"/>
    <updated>2012-05-09T23:12:00-04:00</updated>
    <id>http://www.neilsmithline.com/blog/2012/05/09/sparkleshare-bomb</id>
    <content type="html"><![CDATA[<p>
Based on a LifeHacker posting, I previously blogged about giving SparkleShare a try.. It was cool. A free Dropbox with private hosting. So I installed, configured, and started using SparkleShare. While I was quite excited when I embarked upon my journey using SparkleShare, things didn&#8217;t work out as well as I had hoped.
</p>
<p>
I quickly found out that SparkleShare doesn&#8217;t handle symbolic links. Not at all. There&#8217;s no workaround. The problem is that SparkleShare relies on Git for synchronization and Git doesn&#8217;t support symbolic links. At least for me, this rendered SparkleShare useless. 
</p>
<p>
When I moved to Dropbox directory, what I had been using for synchronization before SparkleShare, had no files in it, just a bunch of symbolic links. But with SparkleShare, you have to move all your directories into your SparkleShare directory and then scatter symbolic links around your system where the you want the directories to be. This caused a variety of minor but really annoying problems.
</p>
<p>
But SparkleShare totally fails if you want to synchronize a directory that has symbolic links in it. SparkleShare&#8217;s forum was covered with complaints about the symbolic link problem.
</p>
<p>
I am currently using the following scheme for file distribution/backups:
</p><ul>
<li>I&#8217;m using rsync to keep my media, bin directory, dot-files, and the like in sync on all my computers.
</li>
<li>For actual backups, I&#8217;ve been using Crashplan for years and couldn&#8217;t be happier.
</li>
<li>And, in the past week or two, I&#8217;ve put Dropbox synchronization back into the mix to manage synchronization between Org Mode files on my computers and MobileOrg files on my Android. Despite the strong cult following that Dropbox has, synching with my mobile seems to be the only effective use I can find for it. 
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blackberry's Manufacturer RIM Nearly RIP]]></title>
    <link href="http://www.neilsmithline.com/blog/2012/03/31/rim-rip/"/>
    <updated>2012-03-31T20:35:00-04:00</updated>
    <id>http://www.neilsmithline.com/blog/2012/03/31/rim-rip</id>
    <content type="html"><![CDATA[<p>
<b>RIM No Longer A Viable Company</b>
</p>
<p>
<a href="http://bit.ly/HAtKtt">RIM</a>, arguably the manufacturer of the first successful smartphone, the <a href="http://bit.ly/HAub73">Blackberry</a>, has not only lost its market lead, but is facing a rather unpredictable future. RIM&#8217;s new CEO, <a href="http://bit.ly/HAuOO6">Thorsten Heins</a>, <a href="http://www.washingtonpost.com/business/rim-charts-risky-survival-plan-while-opening-door-to-sale/2012/03/31/gIQAJYZRnS_story.html?tid=pm_business_pop">has stated</a> that RIM is open to acquisition. At least for the short-term, his statements have led to a one-day, 5% bounce back of the stock price which was down 70% in the 12 months.
</p>
<p>
<b>RIM&#8217;s History</b>
</p>
<p>
For those of you that are unaware of RIM&#8217;s history, it got its start in <a href="http://en.wikipedia.org/wiki/Canada">Canada</a> as a <a href="http://bit.ly/H9vfx5">2-way pager</a> provider. In 1999, RIM moved into the smartphone market with its first Blackberry and immediately achieved market dominance. 
</p>


<!-- more -->

<p>
Factors that led to their dominance included:
</p><ul>
<li>Intelligent Marketing: One example was a giving away pre-1.0 Blackberries to attendees of the 1999 <a href="http://en.wikipedia.org/wiki/JavaOne">JavaOne</a> conference. I imagine that there wasn&#8217;t a better set of <a href="http://en.wikipedia.org/wiki/Software_release_life_cycle#Beta">beta testers</a> than the gadget geeks that attended JavaOne (myself include). 
</li>
<li>Sales Channels: RIM was selling its 2-way pagers to professionals who had a need to be in constant communication such as doctors, attorneys, business executives, and law enforcement. With the introduction of the Blackberry, RIM just added a better product to offer those same professionals. Sure it was more expensive, but 2-way pagers were already fairly costly. They were the perfect audience to market smartphones to.
</li>
<li>First To Market: In 1999, most mobile providers were focused on upgrading their networks from analog to digital. Once the digital networks were in place, new functionality such as internet access would be easy to providing. But upgrading networks takes time. It involves men climbing towers, FCC regulations, local zoning laws, etc. But RIM didn&#8217;t have to do this.
</li>
</ul>


<p>
<b>RIM&#8217;s Brilliance</b>
</p>
<p>
In what I consider a spectacular marketing and technological move, RIM started providing internet service over their existing 2-way pager network. While only a short-term solution as the 2-way pager network was designed for low-bandwidth usage, it was instantaneous. The first Blackberry was basically a 2-way pager with a good sized screen and full QWERTY keyboard. 
</p>
<p>
<b>What Went Wrong</b>
</p>
<p>
RIM&#8217;s mistake was that they didn&#8217;t learn from prior boom-to-bust technology companies. RIM seems to have perfectly followed the (mis)steps of Digital Electronics. While IBM has survived, it lost its market dominance in a sector, twice. The first time as a manufacture of mainframes in the 1970&#8217;s and then again as a PC manufacturer in the 1980&#8217;s. Apollo Computers, SGI, Xerox, all leaders at one time, are either gone or no longer of interest. 
</p>
<p>
All of these companies suffered from a similar set of mistakes including:
</p><ul>
<li>Overconfidence: Each company thought that they were invulnerable. IBM is perhaps the best example. In the 1970&#8217;s, when an IT manager had to make a decision about what gigantic computer to buy, they often said &#8220;Nobody ever got fired for choosing IBM.&#8221;. 
</li>
<li>Lack of Foresight: Technology and markets change and so too must your company. Clearly RIM, along with its arch-rival Palm, both missed the boat. Phones went from being personal communication devices to be tiny, fit-in-your-pocket, computers. 
</li>
<li>Unwillingness to Self-Cannibalize: In order to stay ahead of the technology market, you must be willing to come out with products that are better and cheaper than your existing products. HP and Goodyear are two companies that get this. Within a product line, HP routinely comes out with a better and cheaper printer than the one they currently have on the market. They know that it is going to kill sales of their existing printer. But HP also knows that when their customers need a new printer, it will be an HP printer. I know that Goodyear isn&#8217;t considered a technology company, but their product, tires, involve high-tech materials and manufacturing processes. The CEO of Goodyear once asked how do you keep a company in business when you know that your next product is going to be cheaper, better, and last longer than your current product? While I think that HP and Goodyear would both prefer to keep selling their old products, they know better. It seems RIM didn&#8217;t.
</li>
</ul>


<p>
<b>The Final Outcome</b>
</p>
<p>
In the end, RIM, the makers of the Blackberry that was a status symbol for business executives in the 1990&#8217;s, has all but been put out of business by Apple, a waning computer company in 1990, and Google, a non-existent company in 1990. 
</p>
<p>
The trick to surviving in the high-tech marketplace is simple. All you need to do is realize that your market share is never safe, that there is always another company working on something that is better than what you have, and that you must act if you are fighting for your life, all-day, everyday. 
</p>


]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automated Gvoice And Gmail To Gcal]]></title>
    <link href="http://www.neilsmithline.com/blog/2012/03/31/gmail2gcal/"/>
    <updated>2012-03-31T16:14:00-04:00</updated>
    <id>http://www.neilsmithline.com/blog/2012/03/31/gmail2gcal</id>
    <content type="html"><![CDATA[<p>
I seem able to hold incredibly large amounts of technical details in my head. In contrast to this, I&#8217;m excited when I can remember what year my kids were born in. From my viewpoint, this is just the way I have always been. From the viewpoint of people in my personal life, it can be frustrating.
</p>
<p>
Being the technophile that I am, I&#8217;ve incorporated many electronic assistive technologies into my life. In 1989 I got my first <a href="http://en.wikipedia.org/wiki/Personal_digital_assistant">PDA</a>. It was about the size and weight of a half-brick. But I could carry it wherever I went and it would ring to remind me to do things. What a deal!
</p>
<p>
My newest electronic assistive technology is a rather complete phone and SMS management system. Its features are:
</p><ul>
<li>I have a permanent record of every incoming or outgoing call or SMS.
</li>
<li>My mobile phone rings whenever I get an incoming call or SMS.
</li>
<li>My home phone rings whenever I get a call.
</li>
<li>My mobile rings and gives me a notification whenever I get a call or SMS.
</li>
<li>My computer rings and gives me a pop-up whenever I get a call or SMS.
</li>
</ul>


<p>
<i>This blog entry is unfinished. It will be updated or followed up with a second blog entry shortly.</i>
</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloud Computing: How Expensive Is A Rainy Day?]]></title>
    <link href="http://www.neilsmithline.com/blog/2012/02/29/azure-sunny-day/"/>
    <updated>2012-02-29T11:42:35-05:00</updated>
    <id>http://www.neilsmithline.com/blog/2012/02/29/azure-sunny-day</id>
    <content type="html"><![CDATA[<p>
According to <a href="http://bit.ly/zc1OOr">The Register</a> (via <a href="http://bit.ly/wzufGC">Slashdot</a>), Microsoft&#8217;s cloud computing platform, Azure, has been down, and I mean <a href="http://dictionary.reference.com/browse/kaput">kaput</a>, for 8+ hours. Worse yet, Azure&#8217;s status page that tells its customers about outages and expected repair times, to which I won&#8217;t provide a link, has now been <a href="http://en.wikipedia.org/wiki/Slashdotted">Slashdotted</a> and is down.
</p>
<p>
Less than a year ago, <a href="http://bit.ly/Ay7loE">AWS</a> suffered a significant, though less serious, <a href="http://bit.ly/yNzqJy">outage</a>.
</p>
<p>
While highly-distributed, cloud-based computing is clearly the future of IT, how can an organization understand the costs and prepare for the unavoidable outages? With the relative newness of 3^rd party cloud services, what statistics are useful.
<!-- more -->

For example, let&#8217;s consider a fictitious service cloud service Neil&#8217;s Cloud Computing or NCC. NCC is a more established cloud computing service. Its detailed records shows that it has been open for 1,701 days (approximately 4.7 years). In that time it has steadily grown to here it now runs tens of millions of instances of virtual computers, services tens of billions requests each day, and has never had a serious outage. 
</p>
<p>
To be generous, let&#8217;s define a <i>serious outage</i> as any outage that renders key parts of the site unusable to a significant portion of the site&#8217;s users and lasts a minimum of five minutes. We&#8217;ll consider any outage less than that a <i>tolerable outage</i>. 
</p>
<p>
Even with all of this information, how can you calculate the cost of moving your enterprise to a cloud computing platform in general or NCC&#8217;s in specific (let&#8217;s assume that NCC is the best service you can find - after all, it is named after me). Even if your is willing to ignore all costs associated with the generously named <i>tolerable outages</i>, how can you know NCC&#8217;s 1,701 days of uptime mean that it will have another 4.7 years of uptime? How can you know it will be up tomorrow?
</p>
<p>
The answer is simple: You can&#8217;t! Just as it says on the bottom of financial documents, past performance is no guarantee of future results.
</p>
<p>
But, when it comes to managing an enterprise, &#8220;can&#8217;t&#8221; means things like &#8220;can&#8217;t go faster than the speed of light&#8221;. Everything else is just &#8220;How much?&#8221;. How much does our current IT solution cost? How much would a cloud computing solution cost? How much do our current outages cost us? What are the odds of having a <i>serious outage</i> if we moved to the cloud and how much would that cost us? Etc&hellip;
</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Smartphones Everywhere]]></title>
    <link href="http://www.neilsmithline.com/blog/2012/02/22/smartphones/"/>
    <updated>2012-02-22T13:38:14-05:00</updated>
    <id>http://www.neilsmithline.com/blog/2012/02/22/smartphones</id>
    <content type="html"><![CDATA[<p>
Interpreting this chart from <a href="http://blog.nielsen.com/nielsenwire/online_mobile/survey-new-u-s-smartphone-growth-by-age-and-income/">Nielsen</a> (via <a href="http://www.wired.com/epicenter/2012/02/smartphone-buying-machine/?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed:+wired/index+(Wired:+Index+3+(Top+Stories+2))">Wired</a>) does not require any great amount of effort.
</p>
<div style="text-align: center">
<p><img src="http://www.wired.com/images_blogs/epicenter/2012/02/Smartphone-Income-and-Age.jpg"  alt="http://www.wired.com/images_blogs/epicenter/2012/02/Smartphone-Income-and-Age.jpg" />
</p>
</div>

<p>
It can be summarized by any of the following sentences:
</p><ul>
<li>The greater your income the more likely you are to have a smartphone.
</li>
<li>Young adults are more likely to have smartphones than older adults.
</li>
<li>Smartphones are only for the young and get outgrown by the old. (Nah! But it is a valid interpretation of the chart.)
</li>
</ul>


<p>
But I think the graph can best be summarized by:
</p>
<div style="text-align: center">
<p><b>Smartphones are where it is at today; and tomorrow, even more so.</b>
</p>
</div>



<!-- more -->
<p>
Perhaps not the best grammar but I think it gets the point across. It becomes even more dramatic when you look at the number of people who have acquired smartphones in the past three months:
</p>
<div style="text-align: center">
<p><img src="http://blog.nielsen.com/nielsenwire/wp-content/uploads/2012/02/SmartPhone_Recent-acquirers-age1.png"  alt="http://blog.nielsen.com/nielsenwire/wp-content/uploads/2012/02/SmartPhone_Recent-acquirers-age1.png" />
</p>
</div>

<p>
As <a href="http://www.imdb.com/title/tt0059968/quotes">Robin</a> would <a href="http://en.wikipedia.org/wiki/Batman_(TV_series)#.22Holy_.......2C_Batman.21.22">say</a>: Holy <a href="http://dictionary.reference.com/browse/ubiquitous+computing?qsrc=2446">ubiquitous computing</a>, Batman!
</p>
<p>
It seems clear that this is where the money is. This means that some subset of technologies such as <a href="http://en.wikipedia.org/wiki/Html5">HTML5</a>, <a href="http://en.wikipedia.org/wiki/Virtuality_(computing)">virtual computing</a>, <a href="http://en.wikipedia.org/wiki/Scala_(programming_language)">Scala</a>, <a href="http://en.wikipedia.org/wiki/Hadoop">Hadoop</a>, <a href="http://en.wikipedia.org/wiki/Amazon_Web_Services">AWS</a>, and <a href="http://en.wikipedia.org/wiki/Couchdb">CouchDB</a>, to name just a few, are going to be the technologies of tomorrow.
</p>
<p>
In my lifetime, I have seen computers revolutionize society in several different ways.
</p><dl>
<dt><a href="#Http-en.wikipedia.org-wiki-Back_office">Back office</a></dt><dd>Back office computerization led to the popularization of <a href="http://en.wikipedia.org/wiki/Automated_teller_machine">ATMs</a>, <a href="http://en.wikipedia.org/wiki/Credit_card">credit cards</a>, <a href="http://en.wikipedia.org/wiki/Fed_Ex">Fed Ex</a> and its overnight delivery service, and set the stage for the online marketplace we are familiar with today.
</dd>
<dt><a href="http://en.wikipedia.org/wiki/Personal_computer">Personal computers</a></dt><dd>Personal computers introduced computing to the public. When I was in school, I would get bonus points for typing my homework assignments. Today, homework assignments must be printed from a <a href="http://en.wikipedia.org/wiki/Word_processor">word processor</a> if not submitted electronically.
</dd>
<dt><a href="http://en.wikipedia.org/wiki/World_wide_web">The web</a></dt><dd>The web, for the first time ever, connected the back office directly to consumers in the comfort of their own home. ATMs allowed you to get 24x7 access to your bank account, but you needed to be at an ATM. PCs gave you access to many digital technologies, but having multiple computers interact was difficult, slow, and frequently expensive. But throw in the web and suddenly: <b>BOOM!</b> You have the <a href="http://en.wikipedia.org/wiki/Online_shopping">online shopping</a>, <a href="http://en.wikipedia.org/wiki/Video_gaming">video gaming</a>, and <a href="http://en.wikipedia.org/wiki/Video_on_demand">video on demand</a> that we live in today.
</dd>
</dl>


<p>
As a diehard nerd, I&#8217;m thrilled to have lived through these technical revolutions. Not only have I lived through them, but I&#8217;ve had the honor of having been an early consumer and even helped develop some of them. So, with great joy, and without trying to sound too greedy, I am joyous that the next revolutionary wave is coming to shore. And it is called <i>ubiquitous computing</i>.
</p>
<p>
I don&#8217;t claim to be the <a href="http://article.wn.com/view/2012/02/02/Did_the_Groundhog_see_his_shadow_2012_Punxsutawney_Phil_twee/">prognosticator of prognosticators</a>. <a href="http://www.wikipedia.com">Wikipedia</a>&#8217;s page on ubiquitous computing was created <a href="http://en.wikipedia.org/w/index.php?title=Ubiquitous_computing&amp;action=history">two years ago</a>. I&#8217;m just happy to be around to be part of it and hope that I get a chance to <a href="http://bit.ly/zN6qBU">surf the wave</a>.
</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog In A Box (actually, a repo)]]></title>
    <link href="http://www.neilsmithline.com/blog/2012/02/15/nogit-blog-in-a-box/"/>
    <updated>2012-02-15T22:54:25-05:00</updated>
    <id>http://www.neilsmithline.com/blog/2012/02/15/nogit-blog-in-a-box</id>
    <content type="html"><![CDATA[<p>
As I have been developing my blog&#8217;s technology, I have been surprised at the lack of a pre-packaged <a href="http://en.wikipedia.org/wiki/Blog">blogging</a> solution for <a href="http://www.gnu.org/software/emacs/">Emacs</a>&#8217; <a href="http://orgmode.org/">Org Mode</a>. Org Mode is simply a wonderful tool for organizing thoughts, ideas, text, links, etc&hellip; While Org Mode has a rather difficult learning curve, its motto, <i>Your life in plain text.</i>, seems to be accurate.
</p>
<p>
Spurred by ideas from <a href="http://decafbad.com">0xDECAFBAD.com</a> and code from <a href="http://nanoblogger.sourceforge.net/">NanoBlogger</a> (NB), I&#8217;ve gone about creating an Org Mode-based blogging system. And, if you are reading this, it is actually working. While NB and Org Mode do all the heavy lifting, I&#8217;ve simply added some glue to hook them together. What I have is far from a perfect solution, but it seems to work pretty well. 
<!-- more -->

There is a bit of a UI problem in that the Org Mode editing has a general look-and-feel like that seems like a typical Org Mode editor with a NanoBlogger posting jammed in. That&#8217;s not surprising as, to save development time, I&#8217;ve basically just jammed a NanoBlogger posting into an Org Mode buffer.
</p>
<p>
The other problem that I have with the system is that there is no way to automatically detect the difference between postings that have been published and those that have not published (ie: drafts). Unless you take extra care when publishing your blog, all postings, whether or not they are drafts, will be posted.
</p>
<p>
Once I&#8217;ve fixed these two problems I will have a simple but reasonably functional blog system. By &#8220;simple&#8221; I mean that it is based off of NanoBlogger, a minimal blogging platform. That being said, the <a href="http://nanoblogger.sourceforge.net/">goals</a> of NB are simple goals compared to most blogging systems. If you want a richer blogging system then NB isn&#8217;t for you.
</p>
<p>
The <i>glue</i> that I&#8217;ve written to connect NB with Org Mode is a shell script and some <a href="http://en.wikipedia.org/wiki/Elisp">elisp</a> code. Combined they are only a few hundred lines of extensively-commented code. The entire NanoBlogger installation, living up to its name, is only 844K. 
</p>
<p>
Being that NB is so very compact, my shell scripts and elisp code are small, everything is in plain text files, and that <a href="http://github.com">Github</a> provides simple and free hosting of both the blogging system and the blog, I&#8217;m going to merge my entire blogging system, minus Emacs, with my blog and put it into a single Github repository. 
</p>
<p>
Once that is done, anyone who wants to try my blogging technology should only have to do a few simple steps:
  # Fork my blog to their own Github repository.
  # Clone their copy of my blog to their computer.
  # Delete my blog postings (I&#8217;m assuming people will want to create their own postings and not republish mine).
  # Run emacs and load the single elisp glue file I&#8217;ve created.
  # Start blogging.
</p>
<p>
I believe that it will take less than 10 minutes to get a blog up-and-running. That is longer than it takes to get a hosted blog on <a href="http://www.blogger.com">Blogger</a> but much, much faster than most self-hosted mechanisms such as <a href="http://www.movabletype.com/">MovableType</a>. The only prerequisites for this blogging system are
</p><ul>
<li>Bash and the other common shell script utilities that are required by NanoBlogger such as sed and awk.
</li>
<li>A reasonably modern GNU Emacs. It comes with Org Mode pre-installed.
</li>
<li>The <i>git</i> command-line program.
</li>
</ul>


<p>
Being that this blogging system is only aimed at Emacs users, it is certain that they&#8217;ll have Emacs already installed on their machine. It is also very likely that they&#8217;ll have bash and the shell script utilities. Maybe they&#8217;ll have git or maybe they&#8217;ll need to install it. It is a simple installation.
</p>
<p>
There is no need to install a local web server for staging. Provided you have versions from this decade, there is no need to ensure you have the right version of any of this software. Managing versions of installed software can be a major pain for many systems (eg: Python based-apps). You also have full access to your blog&#8217;s data without having to export anything (everything is already in plain text files) or provide a credit card (Github is free).
</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New NanoBlogger Command-Line]]></title>
    <link href="http://www.neilsmithline.com/blog/2012/02/14/nbc/"/>
    <updated>2012-02-14T13:13:34-05:00</updated>
    <id>http://www.neilsmithline.com/blog/2012/02/14/nbc</id>
    <content type="html"><![CDATA[<p>
As I&#8217;ve discussed in previous <a href="http://www.neilsmithline.com/archives/blog">postings about this blog&#8217;s technology</a>, this is a static blog written with NanoBlogger. NanoBlogger is a <a href="http://en.wikipedia.org/wiki/Command-line_interface">CLI</a> driven blogging system. Alas, I have found the <a href="http://nanoblogger.sourceforge.net/docs/nanoblogger.html">NanoBlogger manual</a> to be difficult to follow and the syntax of the CLI to be non-intuitive. (See the footnote <a href="https://github.com/Neil-Smithline/nbc">here</a> regarding the existing CLI.) On the upside, NanoBlogger is a CLI system which makes it easy to modify. 
</p>
<p>
I started out with a few small helper scripts, eventually merging them into a single helper script. As I was using that script and learning more about NanoBlogger, I found myself writing smaller helper scripts for my big helper script. Eventually, I was never calling my original, large helper script directly.
<!-- more -->

At this point it became clear that some refactoring was needed. So I refactored. I came up with a single shell script call <i>nbc.sh</i> that does all the work and a series of shell scripts that simply call nbc.sh.
</p>
<p>
The key idea behind nbc.sh, or simply <i>nbc</i>, is that the scripts that call it are trivial. By &#8220;trivial&#8221; I mean that each script is only a few lines long, all the side scripts have identical content, and, if not for the semantics of <a href="http://en.wikipedia.org/wiki/Git_(software)">Git</a>, would simply be multiple symbolic links to the same program.
</p>
<p>
As you can see below, the code for the side scripts simply stores the command name, <i>$0</i>, of the side script that was called and then calls the <i>nbc.sh</i> script that is in the same directory as the side script. 
</p>


<pre class="example">#!/bin/sh

# Code to load include file.
ORIG_ARG_0="$0"
NBDIR=${0%/*}
. ${NBDIR}/nbc.sh
</pre>

<p>
This means that as I continue to add functionality to nbc, all I need to do is copy one of the side scripts to the filename of the new command I added. 
</p>
<p>
While I won&#8217;t discuss the exact naming scheme used for these side scripts in detail in this posting, I will say that I have tried to systematic in how the scripts are named. Once you learn a few abbreviations (eg: &#8220;e&#8221; for &#8220;Entry&#8221; or &#8220;Entries&#8221;, &#8220;u&#8221; for &#8220;Update&#8221;) and the rules for combining those abbreviations (standard <a href="http://en.wikipedia.org/wiki/Reverse_Polish_Notation">RPN</a>), you will know the names of all the commands, what each command does, and the type and order of arguments each command takes.
</p>
<p>
I still need to write richer documentation for nbc and its side scripts, but I can finish this posting off with some concrete examples.
</p>
<p>
NB supports an &#8220;update&#8221; command that essentially tells NB to rebuild the blog from scratch. The syntax of this command is:
</p>


<pre class="example">nb update
</pre>

<p>
My nbc version of this command is:
</p>


<pre class="example">nbu
</pre>

<p>
All of the commands for nbc start with the letters &#8220;nb&#8221;. The letter &#8220;U&#8221; is the abbreviation for &#8220;Update&#8221;. So &#8220;nbu&#8221; tells nb to run the update command. As I said, the code for nbu and the other side scripts are trivial and given above. As far as examples go, nbu is not very exciting. But the nbc&#8217;s CLI for creating tags is a bit more exciting.
</p>
<p>
NB&#8217;s syntax for creating tags, as documented in its manual, is:
</p>


<pre class="example">nb --title &lt;tag-name&gt; add tag
</pre>

<p>
Gosh! That&#8217;s both tough to remember and tough to type. In nbc, the command for adding a tag is <i>nbga</i>. All commands start with &#8220;nb&#8221;. After that, the &#8220;g&#8221; means that we are talking about &#8220;taGs&#8221;. The &#8220;a&#8221; stands for &#8220;Add&#8221;. The syntax for the command is 
</p>


<pre class="example">nbga &lt;tag list&gt;
</pre>


<p>
Besides being much easier to type and remember, it allows a tag list as compared to a single tag name. That is, you can create multiple tags in a single command rather than needing to call nb once for each new tag.
</p>
<p>
In NBC, a tag list is a comma-separated list of one or more tag names. So &#8220;tag1&#8221; is a tag list and &#8220;tag1,tag2,tag3&#8221; is also a tag list. If you prefer you can space-separate the tag list but you need to ensure that you pass the entire tag list as the first argument to nbga. 
</p>
<p>
As the operations become more complex, NBC&#8217;s simplifications become greater and more obvious. My next posting about NBC will discuss some of these simplifications.
</p>
<p>
If you wish to use NBC, look at the source code, or tell me why NBC sucks, you can get the scripts at <a href="https://github.com/Neil-Smithline/nbc">https://github.com/Neil-Smithline/nbc</a>.
</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Blog Is Now Hosted For Free (and it's slashdot proof too)]]></title>
    <link href="http://www.neilsmithline.com/blog/2012/02/03/github/"/>
    <updated>2012-02-03T21:49:09-05:00</updated>
    <id>http://www.neilsmithline.com/blog/2012/02/03/github</id>
    <content type="html"><![CDATA[<p>
While there are many free or nearly free blog hosting sites available, most of them come with a long list of restrictions. Either they restrict you to using their blogging software, throw ads on your pages, give you the &#8220;unlimited bandwidth&#8221; plan that they&#8217;ll cut off if your site gets too much traffic, limit you to only the ugly themes, etc.
</p>
<p>
But <a href="http://www.neilsmithline.com">www.neilsmithline.com</a> is now hosted on a site that charges me nothing, doesn&#8217;t put ads on my pages, couldn&#8217;t care less about the theme I use, and, should I ever be lucky enough, survive <a href="http://en.wikipedia.org/wiki/Slashdotting">slashdotting</a>. The only restriction is that my blog has to be static. Being that I already had a static blog (see <a href="#about-this-blogs-tech.org">previous posting</a>), this was no problem for me at all. I&#8217;ve used lots of dynamic blogs (<a href="http://en.wikipedia.org/wiki/Drupal">Drupal</a>, <a href="http://en.wikipedia.org/wiki/Wordpress">WordPress</a>, <a href="http://en.wikipedia.org/wiki/Joomla">Joomla</a>, <a href="http://en.wikipedia.org/wiki/Blogger_(service)">Blogger</a>, <a href="http://en.wikipedia.org/wiki/Movable_Type">Movable Type</a>, etc.) and just found that &#8220;dynamic&#8221; is a short way of saying that the blogging system is going to do what it wants and not what I want.
<!-- more -->

Along with the free hosting I get automatic version control, well-managed collaboration (not that I have any collaborators), data redundancy, eternal archiving (I probably won&#8217;t need it that long but it&#8217;s nice to know that nothing will get lost), and the ability to get a copy of my data onto my local machine whenever I want it.
</p>
<p>
My choice of blogging technology was largely influenced by these two blog postings, <a href="http://decafbad.com/blog/2011/06/08/further-jekyll-notes">1</a> and <a href="http://decafbad.com/blog/2011/06/08/moved-to-jekyll">2</a>, and email conversations I had with their author, <a href="https://plus.google.com/114487965928288927815/about">Les Orchard</a>. While Les went with <a href="https://github.com/mojombo/jekyll">Jekyll</a>, I preferred the simpler <a href="http://nanoblogger.sourceforge.net/">NanoBlogger</a>. Les uses <a href="http://github.com">Github.com</a> for versioning his blog but hosts his blog on his own site as he wants full control of what is published. I simply couldn&#8217;t agree with him more. 
</p>
<p>
When I moved to my new blogging framework, I quickly got my blog up and running using NanoBlogger for site generation and sftp to publish it to my VPS. Today I investigated replacing sftp with Github and its notification framework. This would essentially mirror Les&#8217;s blog system except that I am running NanoBlogger locally while he runs Jekyll. 
</p>
<p>
As I was investigating using Github for transportation and archiving of my blog, I decided to take another look at <a href="http://pages.github.com/">Github Pages</a>. And then, like a lightning bolt, it occurred to me. When I publish my blog by pushing it to Github, if the repository has the magic name of <i>neil-smithline.github.com</i>, then Github would publish my blog at <a href="http://neil-smithline.github.com/">http://neil-smithline.github.com/</a> automatically. There simply was no benefit to serve my blog from my VPS as Github would do it far better than I could on my VPS.
</p>
<p>
The only problem I foresee is that I run more than just my blog on <a href="http://www.nelismithline.com">www.neilsmithline.com</a>. But the other applications I run are only for my private use so I can just map them to another sub-domain such as <i>whatever.neilsmithline.com</i>. For example, I&#8217;ve been playing with a cloud-based bookmarking system, <a href="http://www.phoboslab.org/projects/asaph">Asaph</a>, that allows you to run your own cloud bookmark server. But I can access it at and, if you have an interest, can view it at: <a href="http://www2.neilsmithline.com/asaph/">http://www2.neilsmithline.com/asaph/</a>.
</p>
<p>
All-in-all, it&#8217;s like a nerd&#8217;s dream come true :-D
</p>
<p>
<b>UPDATED: Sat Feb 11 13:12:02 EST 2012</b>
</p>
<p>
There seems to be another problem with hosting my blog on Github. While practically all of Github requires SSL, there appears to be no way to get a Github hosted website to use SSL. Thinking about it, the task seems inherently difficult. Github makes all of its sources file public but you must protect your site&#8217;s SSL private key. Currently, all site information is stored in the Github repository. A private SSL key could only be added if Github updated their configuration to allow the key to be stored out-of-band (ie: not in the repository).
</p>]]></content>
  </entry>
  
</feed>
