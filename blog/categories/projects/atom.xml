<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: projects | My Geekdom]]></title>
  <link href="http://Neil-Smithline.github.com/blog/categories/projects/atom.xml" rel="self"/>
  <link href="http://Neil-Smithline.github.com/"/>
  <updated>2012-07-22T21:42:51-04:00</updated>
  <id>http://Neil-Smithline.github.com/</id>
  <author>
    <name><![CDATA[Neil Smithline]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SPG: The Secure Password Generator]]></title>
    <link href="http://Neil-Smithline.github.com/blog/2012/06/10/secure-password-generator/"/>
    <updated>2012-06-10T16:48:00-04:00</updated>
    <id>http://Neil-Smithline.github.com/blog/2012/06/10/secure-password-generator</id>
    <content type="html"><![CDATA[<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">As Users, We Must Expect Our Passwords To Be Compromised</h2>
<div class="outline-text-2" id="text-1">

<p>It is an unfortunate fact that, if you create accounts on websites, some of your passwords will be stolen. For example:
</p><ul>
<li>There has been a lot of recent press about <a href="http://linkd.in/Mz4gjU">LinkedIn</a>'s recent 6.5M <a href="http://yhoo.it/Mz4o2T">stolen passwords</a>. 
</li>
<li>In the week since LinkedIn's attack became public, <a href="http://bit.ly/Mz4yHu">eHarmony</a> lost 1.5M passwords in an <a href="http://lat.ms/Mz4I1y">unrelated attack</a>. 
</li>
<li>Earlier in the year, an undisclosed number of <a href="http://bit.ly/LLAaXu">Zappos</a> 24M users had their <a href="http://bit.ly/LLAfdJ">passwords compromised</a>. 
</li>
<li>The <a href="http://bit.ly/LLB5Hl">attack</a> on Gawker Media's collection of popular sites (<a href="http://gaw.kr/LLBedR">Gawker</a>, <a href="http://bit.ly/LLBf1y">Lifehacker</a>, <a href="http://bit.ly/LLBfhZ">Gizmodo</a>, <a href="http://bit.ly/LLBh9N">io9</a>,<a href="http://bit.ly/LLBhqe"> Jalopnik</a>, <a href="http://bit.ly/LLBfyC">Kotaku</a>, <a href="http://deadsp.in/LLBfyD">Deadspin</a>, and <a href="http://bit.ly/LLBhqh">Fleshbot</a>) in late 2010 that compromised 1.3M accounts shows that this is not a new phenomenon. 
</li>
</ul>


</div>

</div>




<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">Cascading Damages</h2>
<div class="outline-text-2" id="text-2">

<p>Having your password stolen from a website is a problem. But if you use the same password for many sites, the problem becomes a nightmare. I know that everyone tells you to use <a href="http://bit.ly/KWPdld">strong passwords</a> and to use a different password for each website &ndash; but few people do. A quick look at these <a href="http://bit.ly/KWPowF">Google search results</a> should be convince you that people just don't follow that advice.
</p>
</div>

</div>




<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">The Reason Behind The Mega-Password Thefts</h2>
<div class="outline-text-2" id="text-3">

<p>Despite every assurance made by websites (eg: <a href="http://bit.ly/LLEqX3">LinkedIn</a>'s recent message), the only way a website can lose millions of passwords is if they just didn't bother to follow standard security procedures for storing your password. So LinkedIn, Gawker, Zappos, etc.., didn't care about your password's security until a breach made it into the headlines.
<!-- more -->

As revolting as that fact is, it is accurate.
</p>
<p>
The trick to securely storing a user's password is rather simple: don't store the user's password as it can't be stolen if it is never stored. 
</p><blockquote>

<p>Huh?
</p>
</blockquote>


<p>
You heard me correctly. Websites should store a &lt;geek vernacular warning&gt; <i>salted hash</i> of your password rather than your password. Understanding the math and computer science behind salted hashes is unimportant. All you need to know is that the technology exists. If you are curious, you can read this <a href="http://bit.ly/LLGvlN">OWASP article</a> about salted hashes.
</p>
</div>

</div>




<div id="outline-container-4" class="outline-2">
<h2 id="sec-4">An Ounce Of Prevention</h2>
<div class="outline-text-2" id="text-4">

<p>The only way to protect yourself against these thefts is to, as everyone will tell you, use a unique, strong password for every site. Don't worry, I won't preach to you. You know that this is what should be done and I know that you know that this should be done.
</p>
<p>
There are two problems with this:
</p><ol>
<li>It is difficult to keep track of so many passwords.
</li>
<li>People are astoundingly bad at creating secure passwords.
</li>
</ol>


<p>
<a href="http://bit.ly/KWS3GH">Other than that, how was the play, Mrs. Lincoln?</a>
</p>
</div>

</div>




<div id="outline-container-5" class="outline-2">
<h2 id="sec-5">Tools And Reprogramming Are The Answer</h2>
<div class="outline-text-2" id="text-5">

<p>It turns out that the best solution to managing your passwords involves the use of tools and reprogramming. The tools are used to help you create unique passwords as well as remember them. The tools can be simple. For example, a handful of <a href="http://bit.ly/KWRhcK">dice</a> can be used to generate unique and secure passwords.
</p>
<p>
The reprogramming part is the more difficult. It involves you reprogramming your brain so that you protect yourself. Think of it as <i>safe surfing</i>.
</p>
</div>

</div>




<div id="outline-container-6" class="outline-2">
<h2 id="sec-6">The Answer Is&hellip;</h2>
<div class="outline-text-2" id="text-6">

<p>The answer is going to be in my next blog posting. I'll present several tools and strategies, including one that I'm currently developing, that work better than carrying around a handful of <a href="http://bit.ly/KWRc90">zocchihedrons</a> :-)
</p></div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Ruby Project]]></title>
    <link href="http://Neil-Smithline.github.com/blog/2012/06/01/first-ruby-project/"/>
    <updated>2012-06-01T19:18:00-04:00</updated>
    <id>http://Neil-Smithline.github.com/blog/2012/06/01/first-ruby-project</id>
    <content type="html"><![CDATA[<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">The Project</h2>
<div class="outline-text-2" id="text-1">

<p>Typically, even my pet projects have a specific goal in mind. I don't write a spec for my personal projects, there's just a, maybe slightly fuzzy, goal. Generally I want something that will be useful. I'll work on a project until:
</p><ul>
<li>The project does everything I hoped for. Maybe even more!
</li>
<li>I run out of spare time to work on it. This doesn't happen as often as you may imagine. I really enjoy coding. So, after a tiring day of coding at the office, I come home to relax and work on one of my pet projects. If it was any different, then I have no right to call my blog <a href="http://bit.ly/yGGszW">My Geekdom</a>. 
</li>
<li>I decide that I did a poor job picking a pet project as they're supposed to be fun and this projects isn't. So long!
</li>
<li>I get stuck such that proceeding will require more effort than I feel it's worth. That said, hopefully I learned something working on the project.
</li>
</ul>


<p>
But, unlike my typical pet projects, my goal with my new project is rather amorphous. I want to analyze some data. At time of writing this, I have just shy of 5K records totally 181MB of data. 
</p>
<p>
Leaving the details for a later posting, each record is a snapshot of the state of my <a href="http://bit.ly/Kfv0n2">Mac OS X</a> computer. I've been collecting, and am continuing to collect, samples every five minutes since the beginning of March. At least every five minutes that my computer isn't <a href="http://bit.ly/LUSEY8">sleeping</a> or hanging.
</p>
<p>
I decided to collect the samples because I was getting downright frustrated with the performance of <a href="http://bit.ly/LUT7tx">Mozilla</a>'s <a href="http://bit.ly/HzqbTy">Firefox</a> browser. For reasons that are off-topic for this posting, I feel a strong interest in making sure that Firefox continues to be successful. 
</p>
<p>
For years I thought Firefox was the bomb. Starting about 9-12 months ago I started to notice that Firefox was routinely using all the resources on my computer. This concerned me because <a href="http://bit.ly/LUUGHN">Google</a>'s <a href="http://bit.ly/LUUHLP">Chrome</a> browser was starting to have enough functionality to be a primary browser.
</p>
<p>
Being that I wanted Firefox to stay competitive, I decided to try to stay with it. As Mozilla changed their release model, I started to use <a href="http://bit.ly/LUV1u1">Aurora</a> and <a href="http://bit.ly/LUV4Ga">Firefox Beta</a> and provide lots of feedback. The newer versions also seemed to consume a more reasonable amount of my computer's resources. Being that the Firefox team was working hard at fixing performance problems, especially memory leaks, I stayed with Firefox. (See <a href="#sec-5">Reference: Articles About Firefox's Memory Leaks And Repair Efforts</a> for information about FF's memory leaks.)
<!-- more -->

Around the beginning of this calendar year I started to think that Firefox wasn't getting faster and may have been getting slower. That said, I can be a pretty heavy user of my computer. Running FF with a couple of dozen add-ons is typical. Also, my experience with performance tuning has taught me that I don't know enough to make accurate guesses. Guessing can be used to lead your performance tuning investigations, but you always need hard data.
</p>
<p>
After a bit of thought, I decided to collect some data and see if I can convince myself that Firefox is or is not the problem. There are, of course, simpler solutions to tracking a performance problem than sampling your entire process every five minutes for months. But this is a pet project. It wouldn't be any fun if I just switched from Firefox to Chrome to see if I notice a difference.
</p>
<p>
Now that I have accumulated a few months of the data, I need to try to analyze the data and see what, if any, conclusions I can make from it. I have some ideas about where to start my data analysis and will just need to follow the path they outline. In short, I'm prepared to <a href="http://en.wikipedia.org/wiki/MacGyverism#MacGyverisms">MacGyver</a> the analysis as I go along.
</p>
<p>
My new pet project is the exploration of these data samples.
</p>
</div>

</div>




<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">The Programming Language</h2>
<div class="outline-text-2" id="text-2">

<p>Forensic performance analysis is never simple. For this project I anticipate that the difficulties will be in determining what types of data analyses are required. I'm hoping the actual coding will be relatively simple as there is no need for network interaction, provide real time responses, or even have a <a href="http://bit.ly/n1i2v2">GUI</a>. As long as I don't need to do very complex statistical analyses, the choice programming language won't likely matter to much.
</p>
<p>
So I have chosen to implement this project in <a href="http://bit.ly/LUK5N0">Ruby</a>. I'm certain I could implement it faster in any of a few dozen other programming languages but I chose Ruby for two reasons:
</p><ol>
<li>This is a personal project. One of my main goals is to have fun. Being that I don't know Ruby, learning it will be more fun. Especially being that I haven't learned a new language in a year or so.
</li>
<li>Ruby is a new-ish language, growing in popularity, likely to be around for awhile, so it seems like something I should learn or at least be familiar with.
</li>
</ol>


<p>
Ruby isn't wholly unfamiliar to me. I've made a few small (very small) changes to the <a href="http://bit.ly/JBwXrU">org-ruby</a> <a href="http://bit.ly/M5PRvb">gem</a>. Based on that experience, I think that the syntax of Ruby is kind of strange but the functionality it provides seems comparable to other languages such as C and Java. I just have to learn the new syntax. Unlike C and Java, Ruby has <a href="http://bit.ly/M5T4ei">dynamic typing</a>. But languages that I'm fluent in, such as Lisp, Python, Bash, and AWK have dynamic typing. Doesn't seem a problem.
</p>
<p>
But the structure of a Ruby application, at least the structure of the org-ruby gem, feels different to me than the structure of programs I've seen in other languages. Sure Ruby has classes and modules and functions and inheritance as many other languages do. But the design of the org-ruby gem feels a bit unusual to me. 
</p>
<p>
I think that part of the atypicality of the design of the org-ruby gem is that it is a parser that is written in a manner that is not familiar to me. I have a strong background in designing and implementing programming languages, their associated runtimes, IDE's, and such. In my world, there are only a few ways to implement a <a href="http://bit.ly/JBxKsI">parser</a> and org-ruby doesn't use any of them. 
</p>
<p>
That said, I don't think the feeling of unfamiliarity stems from org-ruby's parser not being a <a href="http://bit.ly/JBxTfU">recursive descent parser</a> or implemented with a <a href="http://bit.ly/JBxXMI">parser generator</a> from a <a href="http://bit.ly/JBxYAi">formal grammar</a>. I've seem plenty of really terrible parser implementations that left queasy but didn't feel unfamiliar.
</p>
<p>
Not only do I not think that org-ruby gem is terrible, I think it has a certain elegance to its design. 
</p>
<p>
Having eliminated other possibilities, I'm left to think that the feeling of unfamiliarity must stem from Ruby itself.
</p>
<p>
For example, C and Pascal have a similar feel when you use them. So too do <a href="http://bit.ly/JByk9Q">object oriented</a> languages such as Java and C++. While not OO, C and Pascal are somewhat similar to Java and C++. But a Scheme application doesn't feel anything like a C application (at least not if you understand how to program in Scheme). While I don't have a word for it, I think that Ruby leads to a different way of writing applications than languages that I'm familiar with.. 
</p>
<p>
While I'm not sure what that difference is, I hope to figure it out as I move through this project. In the end, I don't want to have a great "Java program" that happens to have been written using Ruby syntax. I want to have a great Ruby program &ndash; period.
</p>
</div>

</div>




<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">The Project's Current Progress</h2>
<div class="outline-text-2" id="text-3">

<p>"Not much" seems to sum up my current project. While I've been collecting data for months and easing myself into Ruby by working on the org-ruby gem, I just started coding for this project a few hours ago. All I've done so far is write a tiny class to hold a line of data output by the <a href="http://bit.ly/M5V9H3">ps(1)</a> program:
</p>


<pre class="src src-ruby-mode"><span class="linenr"> 1:  </span>class PSDataLine
<span class="linenr"> 2:  </span>  attr_accessor :pid
<span class="linenr"> 3:  </span>  attr_accessor :stat
<span class="linenr"> 4:  </span>  attr_accessor :time
<span class="linenr"> 5:  </span>  attr_accessor :elapsed_time
<span class="linenr"> 6:  </span>  attr_accessor :virtual_size
<span class="linenr"> 7:  </span>  attr_accessor :rss
<span class="linenr"> 8:  </span>  attr_accessor :percent_cpu
<span class="linenr"> 9:  </span>  attr_accessor :percent_mem
<span class="linenr">10:  </span>  attr_accessor :command
<span class="linenr">11:  </span>
<span class="linenr">12:  </span>  # Create the object
<span class="linenr">13:  </span>  def initialize(line_string)
<span class="linenr">14:  </span>    line = line_string.split(' ')
<span class="linenr">15:  </span>    @pid = line[0]
<span class="linenr">16:  </span>    @stat = line[1]
<span class="linenr">17:  </span>    @time = line[2]
<span class="linenr">18:  </span>    @elapsed_time = line[3]
<span class="linenr">19:  </span>    @virtual_size = line[4]
<span class="linenr">20:  </span>    @rss = line[5]
<span class="linenr">21:  </span>    @percent_cpu = line[6]
<span class="linenr">22:  </span>    @percent_mem = line[7]
<span class="linenr">23:  </span>    @command = line[8]
<span class="linenr">24:  </span>  end
<span class="linenr">25:  </span>end
</pre>


<p>
I know it isn't much but I still learned writing it. For example, when I was tinkering with the org-ruby gem, I just copied and pasted code, looked up some details in the Ruby library, etc&hellip; Being that I was modifying existing code, I never learned even the basic syntax. 
</p>
<p>
For example, in order to write my <code>PSDataLine</code> class, I needed to learn how Ruby uses syntax to determine if an identifier is a local variable, an instance variable, a global variable, or a constant. (My thanks to the <a href="http://bit.ly/JBzTER">Rubyist</a> for the good reference.)
</p>
<p>
I'm pretty busy this week so I don't think I'll make much progress on it. I was only able to get this work done by staying up till midnight on a Friday night and squeezing in time for a proofreading today.
</p>
</div>

</div>




<div id="outline-container-4" class="outline-2">
<h2 id="sec-4">Process Data</h2>
<div class="outline-text-2" id="text-4">

<p>While I've only begun writing my program and haven't reached any conclusions about anything yet, I do have lots of data. If you have an interest in seeing what my computer's been up to you can view the process data, read about my sampling mechanism, and copy the data from my <a href="http://bit.ly/M1nUBf">process-data</a> Github repository.
</p>
</div>

</div>




<div id="outline-container-5" class="outline-2">
<h2 id="sec-5">Reference: Articles About Firefox's Memory Leaks And Repair Efforts</h2>
<div class="outline-text-2" id="text-5">


<ul>
<li>A <a href="http://bit.ly/LsNgcq">blog posting</a> posting by Mozillian Nicholas Nethercote. A <a href="http://bit.ly/LsNhNi">second posting</a> of Nicholas about weeks 49 &amp; 50 of the Mozilla effort to reduce the memory footprint.
</li>
<li>A different engineer's <a href="http://bit.ly/LsNgZS">blog posting</a> discussing the hunt for memory leaks in Firefox.
</li>
<li>Another posting from Nicholas regarding the great [[http://bit.ly/LsNjF0][performance improvements in Firefox V7. - A September 26, 2011 <a href="http://bit.ly/LsNkJ8">article</a> in <a href="http://bit.ly/LsPLeE">CRN</a> discussing the lack of progress Mozilla has been making. Even if you ignore any opinions in the article, it has a lot of facts and links.
</li>
<li>A <a href="http://bit.ly/LsNkZB">Firefox Forum posting</a> expressing user frustration.
</li>
</ul>

</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Org-Mode + t Makes Tweeting Easy]]></title>
    <link href="http://Neil-Smithline.github.com/blog/2012/05/27/org-mode-plus-t-makes-tweeting-easy/"/>
    <updated>2012-05-27T18:23:00-04:00</updated>
    <id>http://Neil-Smithline.github.com/blog/2012/05/27/org-mode-plus-t-makes-tweeting-easy</id>
    <content type="html"><![CDATA[<div id="outline-container-1" class="outline-3">
<h3 id="sec-1">Update <span class="timestamp-wrapper"> <span class="timestamp">2012-06-04 Mon 00:57</span></span></h3>
<div class="outline-text-3" id="text-1">

<p>You can download the code from its <a href="http://cnet.co/M2O9L8">Github repository</a>.
</p>
</div>

</div>




<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">Motivation</h2>
<div class="outline-text-2" id="text-1">

<p>After yesterday's <a href="/blog/2012/05/26/octopress-is-pretty-great" title="Posting about Octopress">ranting about Octopress</a>, it occurred to me that while I now own the content of my blog postings, I don't own the content of my <a href="http://bit.ly/JvoqLE">tweets</a>. I'm sure that there's some way to convince <a href="http://bit.ly/Jvotaj">Twitter</a> to give me my tweets, but why should I rely on them to store my tweets.
</p>
<p>
The obvious answer is that my tweets should be created on my computer and then sent to Twitter. 
</p>
<p>
It should be noted that I'm not interested in implementing a full Twitter client. There are more than enough of those. I'm interested in having my tweets, or at least the bulk of my tweets, in a simple and easily accessible format.
</p>
</div>

</div>




<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">The Answer Must Be Cheap</h2>
<div class="outline-text-2" id="text-2">

<p>While I want to author and store my tweets locally, it is not a high priority task for me. Whatever solution I come up with must add little or no overhead to my tweeting workflow, must be simple to implement, and cannot require ongoing tinkering to keep working.
</p>
<p>
Being that my relationship with <a href="http://bit.ly/zhYdcB">Org Mode</a> is rather simple: The more I learn about it the more of my life I want to be based on Org Mode. Org Mode just seems to make everything easier. So I decided to use Org Mode for the author, publication, and storage of my tweets. The system I'm describing has these properties:
</p><ul>
<li>It took me just a few hours to design, implement, test, and begin using it for tweeting.
</li>
<li>Besides not adding overhead to my tweeting, it has made tweeting dramatically simpler.
</li>
<li>The entire implementation is a single file of <a href="http://bit.ly/wTaGtn">elisp</a> that is 120 lines long. 50 of those lines are standard Emacs header comments that are automatically created. The implementation, along with its documentation, is only 70 lines long. While a small code base isn't one of my goals, not needing ongoing tinkering is. It is hard to imagine that 70 lines of code will require too much tinkering.
</li>
</ul>


<!-- more -->

</div>

</div>




<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">Advantages Of Org Mode</h2>
<div class="outline-text-2" id="text-3">

<p>Before continuing, you should know a few facts about Org Mode:
</p><ul>
<li>At its core, Org Mode is an <a href="http://bit.ly/MSMf12">outliner</a> on steroids. This works great for me as I tend to organize my thoughts as trees. I'm obvious not alone as the <a href="http://bit.ly/MSMf12">outliner</a> page on <a href="http://bit.ly/KWo5OA">Wikipedia</a> has a list of many outliner applications along with <a href="http://bit.ly/KWoa4F">references</a> to many outliners that are designed to implement specific functionality. 
</li>
<li>Org Mode augments its outlining functionality with a <a href="http://bit.ly/MSKKjm">task management system</a> (<a href="http://bit.ly/MSKKjm">details</a>).
</li>
<li>Org Mode has a <a href="http://bit.ly/MSNhKm">template</a> based <a href="http://bit.ly/MSN7CO">data capturing</a> system that allows for the easy capturing of data into a consistent format.
</li>
<li>Org Mode is implemented in <a href="http://bit.ly/MSNvkN">GNU Emacs</a>. Besides the fact that I spend nearly all of my non-browser computer time in Emacs, Emacs has a <a href="http://bit.ly/MSNVrv">rich extension mechanism</a>
</li>
</ul>


</div>

</div>




<div id="outline-container-4" class="outline-2">
<h2 id="sec-4">The Storage Structure Of Tweets</h2>
<div class="outline-text-2" id="text-4">

<p>Each tweet would be an outline entry whose title would be a small description of the tweet plus some other information to be discussed later. The body for each outline entry would be the tweet. In Org Mode this would look like:
</p><pre class="example">
* My First Tweet
  This is my first tweet using Org Mode.
</pre>


<p>
While this works fine for one tweet, after 50 or 100 tweets, things are going to get pretty messy. But, as Org Mode is an outliner, it supports the nesting of outline entries via both direct data entry as well as through Org Mode's capturing mechanism. You just need to provide Org Mode with a string that describes the data you want to capture and the outline format for that data.
</p>
<p>
While, for the moment, sparing you the ugliness of the capture configuration string, I'll tell you that Org Mode supports a date tree outline format.
</p><pre class="example">
* 2012
*** 2012-05 May
***** 2012-05-26 Saturday
******* My First Tweet
        This is my first tweet using Org Mode!
***** 2012-05-27 Sunday
******* My Second Tweet
        This is now my 2nd tweet using Org Mode!
</pre>


<p>
Being an outliner, Org Mode supports the <a href="http://bit.ly/KWoekU">folding</a> of the outline. That is, you can collapse the outline to hide parts of it that you are not immediately interested in. For example, let's say that, being today is Monday, I don't want to be bothered looking at my tweets from Saturday Or Sunday. No problem. When you fold the outline headings for Saturday and Sunday, the list of tweets will look like this:
</p><pre class="example">
* 2012
*** 2012-05 May
***** 2012-05-26 Saturday ...
***** 2012-05-27 Sunday ...
</pre>


<p>
The "&hellip;" is Org Mode's way to let you know that this entry has been folded.
</p>
<p>
Keep in mind that I get all of this storage mechanism from Org Mode for free. All I needed to do was create a single configuration string for it.
</p>
</div>

</div>




<div id="outline-container-5" class="outline-2">
<h2 id="sec-5">Capturing Tweets</h2>
<div class="outline-text-2" id="text-5">

<p>A simple yet highly functional storage mechanism is fine but what I'm looking for is to reduce my tweeting overhead. This means that the workflow is what I care about. 
</p>
<p>
The first part of the workflow is the "capturing" of my tweets. Org Mode's capturing mechanism is rather rich. It allows me to capture data (ie: to tweet) from Emacs with a couple of keystrokes. It also allows me to capture data, including an URL and highlighted text from my browser by clicking on a bookmarklet.
</p>
<p>
When I initiate a tweet capture, I'm initially prompted for a "title". That is the descriptive text for the tweet. In the above example, "My First Tweet" is a title. After entering my title, I'm given an <a href="http://bit.ly/KWpdBF">Emacs buffer</a>, basically a new Emacs window, in which to type my tweet.
</p>
<p>
When I'm done typing my tweet, a couple of keystrokes tells Org Mode that it should add the tweet to my tweet file and save the file. 
</p>
</div>

</div>




<div id="outline-container-6" class="outline-2">
<h2 id="sec-6">Tweeting</h2>
<div class="outline-text-2" id="text-6">

<p>Now that I've captured my tweet, I need to actually tweet it. This is where some of the wonders of Emacs come into play. Emacs has lots of <a href="http://bit.ly/KWpRPv">hooks</a> that allow you to insert code into the workflow. Org Mode adds many hooks of its own.
</p>
<p>
Without boring you with the exact details, by using the appropriate hooks I have set up Emacs to take special actions whenever a file is saved that ends in "-update.org". I used the file naming convention of "-update" instead of "-tweet" in case I decide to add other types of status messages at a later date.
</p>
<p>
Being as I was going for simple, I decided that Emacs would not talk directly to Twitter. Instead, I have Emacs use the wonderfully intuitive, functional, and efficient <a href="http://bit.ly/KGlf2s">t application</a>. For my purposes, <code>t</code>'s <a href="http://bit.ly/xOIkfJ">CLI</a> is perfect. Once you've signed into Twitter with <code>t</code>, it will tweet for you with the simple command line of:
</p><pre class="example">
t update This is my tweet text.
</pre>


<p>
That seems about as simple as it can get.
</p>
</div>

</div>




<div id="outline-container-7" class="outline-2">
<h2 id="sec-7">Tracking Tweet Status</h2>
<div class="outline-text-2" id="text-7">

<p>Being that I'm storing more than one tweet in a file, it is important that I know which tweets have been tweeted and which ones haven't. This is another place where I get to leverage the wonders of Org Mode.
</p>
<p>
Beyond outlining, Org Mode supports a simple yet highly functional and customizable <a href="http://bit.ly/KWrJrE">task management system</a>. The customizability allows you to define task states well beyond the typical "open" and "closed" states of many other task managers. 
</p>
<p>
I used the task management to teach Org Mode about status update tasks. A status update task can be in one of two states: <code>POST</code> and <code>DONE</code>. When it is in the <code>POST</code> state, it needs to be posted. The <code>DONE</code> state means it has already been posted. Org Mode's slogan is 
</p><pre class="example">
Org: Your Life in Plain Text
</pre>

<p>and they mean it.
</p>
<p>
To indicate a tweet's, ie: a task's, state, you simply add the state to the outline header line. For example, using the example from above, if I had already posted my first tweet but not my second, the outline would look like this:
</p><pre class="example">
* 2012
*** 2012-05 May
***** 2012-05-26 Saturday
******* =DONE= My First Tweet
        This is my first tweet using Org Mode!
***** 2012-05-27 Sunday
******* =POST= My Second Tweet
        This is now my 2nd tweet using Org Mode!
</pre>


<p>
When I use Org Mode's capturing mechanism to add my new tweet to the file, it automatically adds the state of <code>POST</code> to each new tweet. As mentioned above, when the tweet file is saved it executes my code. While I have 70 lines of code, only two functions consisting of a total of 45 lines is needed to post my tweets. The remaining 35 lines are configuration that, via Emacs and Org Mode's hooks, makes sure that my code is called whenever the tweet file is saved. 
</p>
<p>
The first function, all 9 lines of it, simply asks Org Mode to loop through all tweets (ie: outline headings) in the <code>POST</code> state and call my second function on each of those tweets. The second function calls the CLI t to execute the tweet. This 28 line function that actually does the tweeting is really rather simple. Only 10 lines of it are related to actually tweeting. The remainder of the function is error handling in case, for some reason, my tweet fails.
</p>
<p>
After successfully tweeting a status update, I tell Org Mode to change the tweet's state from <code>POST</code> to <code>DONE</code>. That's all there is to it.
</p>
</div>

</div>




<div id="outline-container-8" class="outline-2">
<h2 id="sec-8">Some Nice Freebies</h2>
<div class="outline-text-2" id="text-8">

<p>Besides the data capturing, the ease of calling an external program, the automatic outline maintenance, the automatic state tracking (ie: <code>POST</code> and <code>DONE</code>), and the automatic execution of my tweeting code whenever the tweet file is saved, the Emacs and Org Mode's richness provide other nice features:
</p><ul>
<li>Twitter's 140 character limit per tweet is easily eyeballed while you are typing in Emacs as the editor tells you how long a line is. I have, of course, implemented a character count error check before tweeting, but it is nice to catch the problem when you are typing. 
</li>
<li>Automated highlighting of tweets.
</li>
<li>A common problem with the 140 character limit on tweets is that URLs can be very long. Emacs helps here with its <a href="http://bit.ly/wSSiWH">Bitly library</a> (courtesy of me :-). This shortens URLs in Emacs, using Bitly, with two keystrokes. (Bitly happens to be my current URL shortener of choice.)
</li>
<li>Org Mode has the ability to automatically record a variety of times associated with each task. I have set up Org Mode to record the time the tweet was entered by me as well as the time that it actually got tweeted.
</li>
<li>Org Mode allows you to <a href="http://bit.ly/KWtipB">tag</a> (aka: "label" or "categorize") each outline item. I have leveraged this in anticipation of extending the tweeting system to include status updates to other services than Twitter. Also, in the future I may want to be able to manage multiple Twitter accounts. I'm not sure that I'll ever implement that functionality, but thought I'd throw it in as preparing for it is essentially free. I currently label each status update with two labels. The first label describes the type of status update. In this case it is "TWEET" to designate that I want to update Twitter. The second label is "NS" to indicate that I want to update the status of my <a href="http://bit.ly/KWtyVp">@neil_smithline</a> Twitter account.
</li>
<li>Emacs is my tweet editor. For those of you who don't know Emacs as well as those of you that know Emacs and hate it, I'm sure you wouldn't want to edit tweets in Emacs. But I have been using Emacs for 25+ years and still think it is pretty slick. Besides the functionality discussed above, Emacs gives me <a href="http://bit.ly/KWtPb0">spell checking/correction</a>, the ability to easily change the case of something I've mistyped, functionality based on English grammar (eg: the ability to move, delete, or even transpose words or sentences), etc&hellip;
</li>
</ul>


</div>

</div>




<div id="outline-container-9" class="outline-2">
<h2 id="sec-9">A Sneak Peek</h2>
<div class="outline-text-2" id="text-9">

<p>After all my blathering, I thought that a screenshot of my tweets would be nice. This screenshot shows tweets for the past three days. I have folded the tweets from Saturday so that they are easy to ignore. For the sake of this picture, I have unfolded my tweets from Sunday so that it shows what a posted tweet looks like. Finally, I have a tweet for today that is queued up to announce this blog posting. 
</p>
<p>
As you look at this screenshot, remember that almost all of this is automatically generated. For example, for the final tweet I had to enter the title "Tweeting From Emacs" (this can actually be blank but I think the title makes it more useful) and the actual tweet. Everything else, including the Bitly URL shortening, comes for free.
</p>
<p>
<img src="http://www.neilsmithline.com/assets/screen-snapshots/tweets-screenshot.png"  alt="http://www.neilsmithline.com/assets/screen-snapshots/tweets-screenshot.png" />
<span style="color:#F8F8F8;">For Technorati: PHTDYXEZKM3Q</span>
</p></div>
</div>

]]></content>
  </entry>
  
</feed>
